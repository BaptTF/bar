// Package autogen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package autogen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Admin_authScopes = "admin_auth.Scopes"
	AuthScopes       = "auth.Scopes"
)

// Defines values for AccountRestrictions.
const (
	AccountBlocked          AccountRestrictions = "blocked"
	AccountRemoteRestricted AccountRestrictions = "remote_restricted"
)

// Defines values for AccountRole.
const (
	AccountAdmin               AccountRole = "admin"
	AccountMember              AccountRole = "member"
	AccountStudent             AccountRole = "student"
	AccountStudentWithBenefits AccountRole = "student_with_benefits"
)

// Defines values for AccountState.
const (
	AccountMustSetCard AccountState = "account_must_set_card"
	AccountOk          AccountState = "account_ok"
)

// Defines values for ErrorCodes.
const (
	ErrAccountNotFound     ErrorCodes = "account_not_found"
	ErrBadRequest          ErrorCodes = "bad_request"
	ErrForbidden           ErrorCodes = "forbidden"
	ErrQRInvalid           ErrorCodes = "qr_invalid"
	ErrTransactionNotFound ErrorCodes = "transaction_not_found"
)

// Defines values for ItemState.
const (
	ItemBuyable    ItemState = "buyable"
	ItemNotBuyable ItemState = "not_buyable"
)

// Defines values for Messages.
const (
	MsgAccountAlreadyExists Messages = "Account already exists"
	MsgAccountNotAllowed    Messages = "Account is not allowed to use ressource"
	MsgAccountNotAvailable  Messages = "Account cannot use ressource at the time being"
	MsgAccountNotFound      Messages = "Account not found"
	MsgMissingFields        Messages = "Missing fields %v"
	MsgNotConnected         Messages = "Not connected"
	MsgQRInvalid            Messages = "Invalid QR Code nonce"
	MsgTransactionNotFound  Messages = "Transaction not found"
)

// Defines values for RefillState.
const (
	Canceled RefillState = "canceled"
	Valid    RefillState = "valid"
)

// Defines values for TransactionItemState.
const (
	TransactionItemCanceled    TransactionItemState = "canceled"
	TransactionItemFinished    TransactionItemState = "finished"
	TransactionItemStarted     TransactionItemState = "started"
	TransactionItemTakenCareOf TransactionItemState = "taken_care_of"
)

// Defines values for TransactionState.
const (
	TransactionCanceled    TransactionState = "canceled"
	TransactionFinished    TransactionState = "finished"
	TransactionStarted     TransactionState = "started"
	TransactionTakenCareOf TransactionState = "taken_care_of"
)

// Account defines model for Account.
type Account struct {
	Balance      int64                 `json:"balance" bson:"balance"`
	EmailAddress string                `json:"email_address" bson:"email_address"`
	FirstName    string                `json:"first_name" bson:"first_name"`
	Id           UUID                  `json:"id" bson:"id"`
	LastName     string                `json:"last_name" bson:"last_name"`
	Restrictions []AccountRestrictions `json:"restrictions" bson:"restrictions"`

	// Role Role of the account
	Role AccountRole `json:"role" bson:"role"`

	// State State of the account
	State AccountState `json:"state" bson:"state"`
}

// AccountRestrictions Restrictions of the account
type AccountRestrictions string

// AccountRole Role of the account
type AccountRole string

// AccountState State of the account
type AccountState string

// CarouselImage defines model for CarouselImage.
type CarouselImage struct {
	Id UUID `json:"id" bson:"id"`

	// ImageUrl Image to display
	ImageUrl string `json:"image_url" bson:"image_url"`
}

// CarouselImageUpload defines model for CarouselImageUpload.
type CarouselImageUpload struct {
	// Image Image to display
	Image openapi_types.File `json:"image" bson:"image"`
}

// CarouselText defines model for CarouselText.
type CarouselText struct {
	// Color Color of the text
	Color string `json:"color" bson:"color"`
	Id    UUID   `json:"id" bson:"id"`

	// Text Text to display
	Text string `json:"text" bson:"text"`
}

// CarouselTextCreate defines model for CarouselTextCreate.
type CarouselTextCreate struct {
	// Color Color of the text
	Color *string `json:"color,omitempty" bson:"color"`

	// Text Text to display
	Text string `json:"text" bson:"text"`
}

// Category defines model for Category.
type Category struct {
	Id    UUID `json:"id" bson:"id"`
	Items Item `json:"items" bson:"items"`

	// Name Name of the current category
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the current category
	PictureUri string `json:"picture_uri" bson:"picture_uri"`
}

// ErrorCodes defines model for ErrorCodes.
type ErrorCodes string

// HTTPError defines model for HTTPError.
type HTTPError struct {
	ErrorCode *ErrorCodes `json:"error_code,omitempty" bson:"error_code"`
	Message   *Messages   `json:"message,omitempty" bson:"message"`
}

// Item defines model for Item.
type Item struct {
	AmountLeft int32 `json:"amount_left" bson:"amount_left"`
	BuyLimit   int32 `json:"buy_limit" bson:"buy_limit"`

	// CategoryId Category of the current item
	CategoryId string `json:"category_id" bson:"category_id"`
	Id         UUID   `json:"id" bson:"id"`

	// Name Name of the current item
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the current item
	PictureUri string `json:"picture_uri" bson:"picture_uri"`
	Price      int64  `json:"price" bson:"price"`

	// State State of the item
	State ItemState `json:"state" bson:"state"`
}

// ItemState State of the item
type ItemState string

// Messages defines model for Messages.
type Messages string

// MinifiedCategory defines model for MinifiedCategory.
type MinifiedCategory struct {
	Id UUID `json:"id" bson:"id"`

	// Name Name of the current category
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the current category
	PictureUri string `json:"picture_uri" bson:"picture_uri"`
}

// NewAccount defines model for NewAccount.
type NewAccount struct {
	EmailAddress string `json:"email_address" bson:"email_address"`
	FirstName    string `json:"first_name" bson:"first_name"`
	LastName     string `json:"last_name" bson:"last_name"`

	// Role Role of the account
	Role *AccountRole `json:"role,omitempty" bson:"role"`
}

// NewCategory defines model for NewCategory.
type NewCategory struct {
	// Name Name of the current category
	Name    string             `json:"name" bson:"name"`
	Picture openapi_types.File `json:"picture" bson:"picture"`
}

// NewItem defines model for NewItem.
type NewItem struct {
	AmountLeft int32 `json:"amount_left" bson:"amount_left"`
	BuyLimit   int32 `json:"buy_limit" bson:"buy_limit"`

	// CategoryId Category of the current item
	CategoryId string `json:"category_id" bson:"category_id"`

	// Name Name of the current item
	Name string `json:"name" bson:"name"`

	// Picture Picture of the current item
	Picture openapi_types.File `json:"picture" bson:"picture"`
	Price   int64              `json:"price" bson:"price"`

	// State State of the item
	State ItemState `json:"state" bson:"state"`
}

// Refill defines model for Refill.
type Refill struct {
	AccountId  UUID        `json:"account_id" bson:"account_id"`
	Amount     int         `json:"amount" bson:"amount"`
	CanceledBy *UUID       `json:"canceled_by,omitempty" bson:"canceled_by"`
	Id         UUID        `json:"id" bson:"id"`
	IssuedAt   int64       `json:"issued_at" bson:"issued_at"`
	IssuedBy   UUID        `json:"issued_by" bson:"issued_by"`
	State      RefillState `json:"state" bson:"state"`
}

// RefillState defines model for RefillState.
type RefillState string

// Transaction defines model for Transaction.
type Transaction struct {
	AccountId string            `json:"account_id" bson:"account_id"`
	Id        UUID              `json:"id" bson:"id"`
	Items     []TransactionItem `json:"items" bson:"items"`
	State     TransactionState  `json:"state" bson:"state"`
	TotalCost int               `json:"total_cost" bson:"total_cost"`
}

// TransactionItem defines model for TransactionItem.
type TransactionItem struct {
	ItemAmount int              `json:"item_amount" bson:"item_amount"`
	ItemId     UUID             `json:"item_id" bson:"item_id"`
	State      TransactionState `json:"state" bson:"state"`
	TotalCost  int              `json:"total_cost" bson:"total_cost"`
}

// TransactionItemState defines model for TransactionItemState.
type TransactionItemState string

// TransactionState defines model for TransactionState.
type TransactionState string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// UpdateAccountAdmin defines model for UpdateAccountAdmin.
type UpdateAccountAdmin struct {
	Balance      *int64                 `json:"balance,omitempty" bson:"balance"`
	EmailAddress *string                `json:"email_address,omitempty" bson:"email_address"`
	FirstName    *string                `json:"first_name,omitempty" bson:"first_name"`
	LastName     *string                `json:"last_name,omitempty" bson:"last_name"`
	Restrictions *[]AccountRestrictions `json:"restrictions,omitempty" bson:"restrictions"`

	// Role Role of the account
	Role *AccountRole `json:"role,omitempty" bson:"role"`

	// State State of the account
	State *AccountState `json:"state,omitempty" bson:"state"`
}

// UpdateCategory defines model for UpdateCategory.
type UpdateCategory struct {
	// Name Name of the current category
	Name    *string             `json:"name,omitempty" bson:"name"`
	Picture *openapi_types.File `json:"picture,omitempty" bson:"picture"`
}

// UpdateItem defines model for UpdateItem.
type UpdateItem struct {
	AmountLeft *int32 `json:"amount_left,omitempty" bson:"amount_left"`
	BuyLimit   *int32 `json:"buy_limit,omitempty" bson:"buy_limit"`

	// CategoryId Category of the current item
	CategoryId *string `json:"category_id,omitempty" bson:"category_id"`

	// Name Name of the current item
	Name *string `json:"name,omitempty" bson:"name"`

	// Picture Picture of the current item
	Picture *openapi_types.File `json:"picture,omitempty" bson:"picture"`
	Price   *int64              `json:"price,omitempty" bson:"price"`

	// State State of the item
	State *ItemState `json:"state,omitempty" bson:"state"`
}

// GetSelfRefillsParams defines parameters for GetSelfRefills.
type GetSelfRefillsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetCurrentAccountTransactionsParams defines parameters for GetCurrentAccountTransactions.
type GetCurrentAccountTransactionsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Page page to get
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of accounts to get
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetAccountRefillsParams defines parameters for GetAccountRefills.
type GetAccountRefillsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// PostRefillParams defines parameters for PostRefill.
type PostRefillParams struct {
	// Amount Amount of the refill
	Amount int `form:"amount" json:"amount" bson:"amount"`
}

// GetAccountTransactionsParams defines parameters for GetAccountTransactions.
type GetAccountTransactionsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// PatchTransactionIdParams defines parameters for PatchTransactionId.
type PatchTransactionIdParams struct {
	// State New state of the transaction
	State TransactionState `form:"state" json:"state" bson:"state"`
}

// PatchTransactionItemIdParams defines parameters for PatchTransactionItemId.
type PatchTransactionItemIdParams struct {
	// State New state of the item
	State TransactionItemState `form:"state" json:"state" bson:"state"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// Code Google OAuth code
	Code string `form:"code" json:"code" bson:"code"`

	// State Google OAuth state
	State string `form:"state" json:"state" bson:"state"`
}

// GetRefillsParams defines parameters for GetRefills.
type GetRefillsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// Page Page number
	Page *int `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *int `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// PutAccountsJSONRequestBody defines body for PutAccounts for application/json ContentType.
type PutAccountsJSONRequestBody = NewAccount

// PatchAccountIdJSONRequestBody defines body for PatchAccountId for application/json ContentType.
type PatchAccountIdJSONRequestBody = UpdateAccountAdmin

// AddCarouselImageMultipartRequestBody defines body for AddCarouselImage for multipart/form-data ContentType.
type AddCarouselImageMultipartRequestBody = CarouselImageUpload

// AddCarouselTextJSONRequestBody defines body for AddCarouselText for application/json ContentType.
type AddCarouselTextJSONRequestBody = CarouselTextCreate

// PostCategoryMultipartRequestBody defines body for PostCategory for multipart/form-data ContentType.
type PostCategoryMultipartRequestBody = NewCategory

// PatchCategoryMultipartRequestBody defines body for PatchCategory for multipart/form-data ContentType.
type PatchCategoryMultipartRequestBody = UpdateCategory

// PostItemMultipartRequestBody defines body for PostItem for multipart/form-data ContentType.
type PostItemMultipartRequestBody = NewItem

// PatchItemMultipartRequestBody defines body for PatchItem for multipart/form-data ContentType.
type PatchItemMultipartRequestBody = UpdateItem

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /account)
	GetAccount(ctx echo.Context) error

	// (GET /account/qr)
	GetAccountQR(ctx echo.Context) error

	// (GET /account/refills)
	GetSelfRefills(ctx echo.Context, params GetSelfRefillsParams) error

	// (GET /account/transactions)
	GetCurrentAccountTransactions(ctx echo.Context, params GetCurrentAccountTransactionsParams) error

	// (POST /account/transactions)
	PutTransactions(ctx echo.Context) error

	// (GET /accounts)
	GetAccounts(ctx echo.Context, params GetAccountsParams) error

	// (POST /accounts)
	PutAccounts(ctx echo.Context) error

	// (DELETE /accounts/{account_id})
	DeleteAccountId(ctx echo.Context, accountId string) error

	// (GET /accounts/{account_id})
	GetAccountId(ctx echo.Context, accountId string) error

	// (PATCH /accounts/{account_id})
	PatchAccountId(ctx echo.Context, accountId string) error

	// (GET /accounts/{account_id}/refills)
	GetAccountRefills(ctx echo.Context, accountId string, params GetAccountRefillsParams) error

	// (POST /accounts/{account_id}/refills)
	PostRefill(ctx echo.Context, accountId string, params PostRefillParams) error

	// (DELETE /accounts/{account_id}/refills/{refill_id})
	DeleteRefill(ctx echo.Context, accountId string, refillId string) error

	// (GET /accounts/{account_id}/transactions)
	GetAccountTransactions(ctx echo.Context, accountId string, params GetAccountTransactionsParams) error

	// (DELETE /accounts/{account_id}/transactions/{transaction_id})
	DeleteTransactionId(ctx echo.Context, accountId string, transactionId string) error

	// (GET /accounts/{account_id}/transactions/{transaction_id})
	GetTransactionId(ctx echo.Context, accountId string, transactionId string) error

	// (PATCH /accounts/{account_id}/transactions/{transaction_id})
	PatchTransactionId(ctx echo.Context, accountId string, transactionId string, params PatchTransactionIdParams) error

	// (PATCH /accounts/{account_id}/transactions/{transaction_id}/{item_id})
	PatchTransactionItemId(ctx echo.Context, accountId string, transactionId string, itemId string, params PatchTransactionItemIdParams) error

	// (GET /auth/google/begin/{qr_nonce})
	ConnectAccount(ctx echo.Context, qrNonce string) error

	// (GET /auth/google/callback)
	Callback(ctx echo.Context, params CallbackParams) error

	// (GET /carousel/images)
	GetCarouselImages(ctx echo.Context) error

	// (POST /carousel/images)
	AddCarouselImage(ctx echo.Context) error

	// (DELETE /carousel/images/{image_id})
	DeleteCarouselImage(ctx echo.Context, imageId string) error

	// (GET /carousel/texts)
	GetCarouselTexts(ctx echo.Context) error

	// (POST /carousel/texts)
	AddCarouselText(ctx echo.Context) error

	// (DELETE /carousel/texts/{text_id})
	DeleteCarouselText(ctx echo.Context, textId string) error

	// (GET /categories)
	GetCategories(ctx echo.Context) error

	// (POST /categories)
	PostCategory(ctx echo.Context) error

	// (DELETE /categories/{category_id})
	DeleteCategory(ctx echo.Context, categoryId string) error

	// (GET /categories/{category_id})
	GetCategory(ctx echo.Context, categoryId string) error

	// (PATCH /categories/{category_id})
	PatchCategory(ctx echo.Context, categoryId string) error

	// (POST /categories/{category_id}/items)
	PostItem(ctx echo.Context, categoryId string) error

	// (DELETE /categories/{category_id}/items/{item_id})
	DeleteItem(ctx echo.Context, categoryId string, itemId string) error

	// (PATCH /categories/{category_id}/items/{item_id})
	PatchItem(ctx echo.Context, categoryId string, itemId string) error

	// (GET /categories/{category_id}/items/{item_id}/picture)
	GetItemPicture(ctx echo.Context, categoryId string, itemId string) error

	// (GET /categories/{category_id}/picture)
	GetCategoryPicture(ctx echo.Context, categoryId openapi_types.File) error

	// (GET /refills)
	GetRefills(ctx echo.Context, params GetRefillsParams) error

	// (GET /transactions)
	GetTransactions(ctx echo.Context, params GetTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface `bson:"handler"`
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccount(ctx)
	return err
}

// GetAccountQR converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountQR(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountQR(ctx)
	return err
}

// GetSelfRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfRefills(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSelfRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfRefills(ctx, params)
	return err
}

// GetCurrentAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentAccountTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCurrentAccountTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentAccountTransactions(ctx, params)
	return err
}

// PutTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) PutTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutTransactions(ctx)
	return err
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccounts(ctx, params)
	return err
}

// PutAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PutAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutAccounts(ctx)
	return err
}

// DeleteAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAccountId(ctx, accountId)
	return err
}

// GetAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountId(ctx, accountId)
	return err
}

// PatchAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAccountId(ctx, accountId)
	return err
}

// GetAccountRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountRefills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountRefills(ctx, accountId, params)
	return err
}

// PostRefill converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRefillParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefill(ctx, accountId, params)
	return err
}

// DeleteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "refill_id" -------------
	var refillId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "refill_id", runtime.ParamLocationPath, ctx.Param("refill_id"), &refillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRefill(ctx, accountId, refillId)
	return err
}

// GetAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountTransactions(ctx, accountId, params)
	return err
}

// DeleteTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTransactionId(ctx, accountId, transactionId)
	return err
}

// GetTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionId(ctx, accountId, transactionId)
	return err
}

// PatchTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTransactionIdParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTransactionId(ctx, accountId, transactionId, params)
	return err
}

// PatchTransactionItemId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTransactionItemId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTransactionItemIdParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTransactionItemId(ctx, accountId, transactionId, itemId, params)
	return err
}

// ConnectAccount converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "qr_nonce" -------------
	var qrNonce string

	err = runtime.BindStyledParameterWithLocation("simple", false, "qr_nonce", runtime.ParamLocationPath, ctx.Param("qr_nonce"), &qrNonce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter qr_nonce: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectAccount(ctx, qrNonce)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// GetCarouselImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselImages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarouselImages(ctx)
	return err
}

// AddCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) AddCarouselImage(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCarouselImage(ctx)
	return err
}

// DeleteCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "image_id", runtime.ParamLocationPath, ctx.Param("image_id"), &imageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCarouselImage(ctx, imageId)
	return err
}

// GetCarouselTexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselTexts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarouselTexts(ctx)
	return err
}

// AddCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) AddCarouselText(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCarouselText(ctx)
	return err
}

// DeleteCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "text_id", runtime.ParamLocationPath, ctx.Param("text_id"), &textId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCarouselText(ctx, textId)
	return err
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategories(ctx)
	return err
}

// PostCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PostCategory(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCategory(ctx)
	return err
}

// DeleteCategory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCategory(ctx, categoryId)
	return err
}

// GetCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategory(ctx, categoryId)
	return err
}

// PatchCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchCategory(ctx, categoryId)
	return err
}

// PostItem converts echo context to params.
func (w *ServerInterfaceWrapper) PostItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostItem(ctx, categoryId)
	return err
}

// DeleteItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItem(ctx, categoryId, itemId)
	return err
}

// PatchItem converts echo context to params.
func (w *ServerInterfaceWrapper) PatchItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchItem(ctx, categoryId, itemId)
	return err
}

// GetItemPicture converts echo context to params.
func (w *ServerInterfaceWrapper) GetItemPicture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetItemPicture(ctx, categoryId, itemId)
	return err
}

// GetCategoryPicture converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoryPicture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId openapi_types.File

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategoryPicture(ctx, categoryId)
	return err
}

// GetRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetRefills(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRefills(ctx, params)
	return err
}

// GetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/account", wrapper.GetAccount)
	router.GET(baseURL+"/account/qr", wrapper.GetAccountQR)
	router.GET(baseURL+"/account/refills", wrapper.GetSelfRefills)
	router.GET(baseURL+"/account/transactions", wrapper.GetCurrentAccountTransactions)
	router.POST(baseURL+"/account/transactions", wrapper.PutTransactions)
	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.PutAccounts)
	router.DELETE(baseURL+"/accounts/:account_id", wrapper.DeleteAccountId)
	router.GET(baseURL+"/accounts/:account_id", wrapper.GetAccountId)
	router.PATCH(baseURL+"/accounts/:account_id", wrapper.PatchAccountId)
	router.GET(baseURL+"/accounts/:account_id/refills", wrapper.GetAccountRefills)
	router.POST(baseURL+"/accounts/:account_id/refills", wrapper.PostRefill)
	router.DELETE(baseURL+"/accounts/:account_id/refills/:refill_id", wrapper.DeleteRefill)
	router.GET(baseURL+"/accounts/:account_id/transactions", wrapper.GetAccountTransactions)
	router.DELETE(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.DeleteTransactionId)
	router.GET(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.GetTransactionId)
	router.PATCH(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.PatchTransactionId)
	router.PATCH(baseURL+"/accounts/:account_id/transactions/:transaction_id/:item_id", wrapper.PatchTransactionItemId)
	router.GET(baseURL+"/auth/google/begin/:qr_nonce", wrapper.ConnectAccount)
	router.GET(baseURL+"/auth/google/callback", wrapper.Callback)
	router.GET(baseURL+"/carousel/images", wrapper.GetCarouselImages)
	router.POST(baseURL+"/carousel/images", wrapper.AddCarouselImage)
	router.DELETE(baseURL+"/carousel/images/:image_id", wrapper.DeleteCarouselImage)
	router.GET(baseURL+"/carousel/texts", wrapper.GetCarouselTexts)
	router.POST(baseURL+"/carousel/texts", wrapper.AddCarouselText)
	router.DELETE(baseURL+"/carousel/texts/:text_id", wrapper.DeleteCarouselText)
	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.POST(baseURL+"/categories", wrapper.PostCategory)
	router.DELETE(baseURL+"/categories/:category_id", wrapper.DeleteCategory)
	router.GET(baseURL+"/categories/:category_id", wrapper.GetCategory)
	router.PATCH(baseURL+"/categories/:category_id", wrapper.PatchCategory)
	router.POST(baseURL+"/categories/:category_id/items", wrapper.PostItem)
	router.DELETE(baseURL+"/categories/:category_id/items/:item_id", wrapper.DeleteItem)
	router.PATCH(baseURL+"/categories/:category_id/items/:item_id", wrapper.PatchItem)
	router.GET(baseURL+"/categories/:category_id/items/:item_id/picture", wrapper.GetItemPicture)
	router.GET(baseURL+"/categories/:category_id/picture", wrapper.GetCategoryPicture)
	router.GET(baseURL+"/refills", wrapper.GetRefills)
	router.GET(baseURL+"/transactions", wrapper.GetTransactions)

}

type GetAccountRequestObject struct {
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount401JSONResponse HTTPError

func (response GetAccount401JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount500JSONResponse HTTPError

func (response GetAccount500JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountQRRequestObject struct {
}

type GetAccountQRResponseObject interface {
	VisitGetAccountQRResponse(w http.ResponseWriter) error
}

type GetAccountQR200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetAccountQR200ImagepngResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetAccountQR401JSONResponse HTTPError

func (response GetAccountQR401JSONResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountQR500JSONResponse HTTPError

func (response GetAccountQR500JSONResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefillsRequestObject struct {
	Params GetSelfRefillsParams `bson:"params"`
}

type GetSelfRefillsResponseObject interface {
	VisitGetSelfRefillsResponse(w http.ResponseWriter) error
}

type GetSelfRefills200JSONResponse []Refill

func (response GetSelfRefills200JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefills401JSONResponse HTTPError

func (response GetSelfRefills401JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefills500JSONResponse HTTPError

func (response GetSelfRefills500JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactionsRequestObject struct {
	Params GetCurrentAccountTransactionsParams `bson:"params"`
}

type GetCurrentAccountTransactionsResponseObject interface {
	VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error
}

type GetCurrentAccountTransactions200JSONResponse struct {
	Accounts *[]Transaction `json:"accounts,omitempty" bson:"accounts"`
	Limit    *int           `json:"limit,omitempty" bson:"limit"`
	MaxPage  *int           `json:"max_page,omitempty" bson:"max_page"`
	Page     *int           `json:"page,omitempty" bson:"page"`
}

func (response GetCurrentAccountTransactions200JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactions401JSONResponse HTTPError

func (response GetCurrentAccountTransactions401JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactions403JSONResponse HTTPError

func (response GetCurrentAccountTransactions403JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactionsRequestObject struct {
}

type PutTransactionsResponseObject interface {
	VisitPutTransactionsResponse(w http.ResponseWriter) error
}

type PutTransactions201JSONResponse Transaction

func (response PutTransactions201JSONResponse) VisitPutTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactions401JSONResponse HTTPError

func (response PutTransactions401JSONResponse) VisitPutTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactions403JSONResponse HTTPError

func (response PutTransactions403JSONResponse) VisitPutTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactions404JSONResponse HTTPError

func (response PutTransactions404JSONResponse) VisitPutTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PutTransactions500JSONResponse HTTPError

func (response PutTransactions500JSONResponse) VisitPutTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountsRequestObject struct {
	Params GetAccountsParams `bson:"params"`
}

type GetAccountsResponseObject interface {
	VisitGetAccountsResponse(w http.ResponseWriter) error
}

type GetAccounts200JSONResponse struct {
	Accounts *[]Account `json:"accounts,omitempty" bson:"accounts"`
	Limit    *int       `json:"limit,omitempty" bson:"limit"`
	MaxPage  *int       `json:"max_page,omitempty" bson:"max_page"`
	Message  *Messages  `json:"message,omitempty" bson:"message"`
	Page     *int       `json:"page,omitempty" bson:"page"`
}

func (response GetAccounts200JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts401JSONResponse HTTPError

func (response GetAccounts401JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts403JSONResponse HTTPError

func (response GetAccounts403JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts500JSONResponse HTTPError

func (response GetAccounts500JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PutAccountsRequestObject struct {
	Body *PutAccountsJSONRequestBody `bson:"body"`
}

type PutAccountsResponseObject interface {
	VisitPutAccountsResponse(w http.ResponseWriter) error
}

type PutAccounts200JSONResponse []Account

func (response PutAccounts200JSONResponse) VisitPutAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PutAccounts401JSONResponse HTTPError

func (response PutAccounts401JSONResponse) VisitPutAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PutAccounts403JSONResponse HTTPError

func (response PutAccounts403JSONResponse) VisitPutAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PutAccounts409JSONResponse HTTPError

func (response PutAccounts409JSONResponse) VisitPutAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PutAccounts500JSONResponse HTTPError

func (response PutAccounts500JSONResponse) VisitPutAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountIdRequestObject struct {
	AccountId string `json:"account_id" bson:"account_id"`
}

type DeleteAccountIdResponseObject interface {
	VisitDeleteAccountIdResponse(w http.ResponseWriter) error
}

type DeleteAccountId204Response struct {
}

func (response DeleteAccountId204Response) VisitDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAccountId401JSONResponse HTTPError

func (response DeleteAccountId401JSONResponse) VisitDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountId403JSONResponse HTTPError

func (response DeleteAccountId403JSONResponse) VisitDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountId404JSONResponse HTTPError

func (response DeleteAccountId404JSONResponse) VisitDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountId500JSONResponse HTTPError

func (response DeleteAccountId500JSONResponse) VisitDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountIdRequestObject struct {
	AccountId string `json:"account_id" bson:"account_id"`
}

type GetAccountIdResponseObject interface {
	VisitGetAccountIdResponse(w http.ResponseWriter) error
}

type GetAccountId200JSONResponse Account

func (response GetAccountId200JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId401JSONResponse HTTPError

func (response GetAccountId401JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId403JSONResponse HTTPError

func (response GetAccountId403JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId404JSONResponse HTTPError

func (response GetAccountId404JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId500JSONResponse HTTPError

func (response GetAccountId500JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountIdRequestObject struct {
	AccountId string                         `json:"account_id" bson:"account_id"`
	Body      *PatchAccountIdJSONRequestBody `bson:"body"`
}

type PatchAccountIdResponseObject interface {
	VisitPatchAccountIdResponse(w http.ResponseWriter) error
}

type PatchAccountId200JSONResponse Account

func (response PatchAccountId200JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId401JSONResponse HTTPError

func (response PatchAccountId401JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId403JSONResponse HTTPError

func (response PatchAccountId403JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId404JSONResponse HTTPError

func (response PatchAccountId404JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId500JSONResponse HTTPError

func (response PatchAccountId500JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefillsRequestObject struct {
	AccountId string                  `json:"account_id" bson:"account_id"`
	Params    GetAccountRefillsParams `bson:"params"`
}

type GetAccountRefillsResponseObject interface {
	VisitGetAccountRefillsResponse(w http.ResponseWriter) error
}

type GetAccountRefills200JSONResponse []Refill

func (response GetAccountRefills200JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills401JSONResponse HTTPError

func (response GetAccountRefills401JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills403JSONResponse HTTPError

func (response GetAccountRefills403JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills404JSONResponse HTTPError

func (response GetAccountRefills404JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills500JSONResponse HTTPError

func (response GetAccountRefills500JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRefillRequestObject struct {
	AccountId string           `json:"account_id" bson:"account_id"`
	Params    PostRefillParams `bson:"params"`
}

type PostRefillResponseObject interface {
	VisitPostRefillResponse(w http.ResponseWriter) error
}

type PostRefill201JSONResponse Refill

func (response PostRefill201JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill400JSONResponse HTTPError

func (response PostRefill400JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill401JSONResponse HTTPError

func (response PostRefill401JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill403JSONResponse HTTPError

func (response PostRefill403JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill404JSONResponse HTTPError

func (response PostRefill404JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill500JSONResponse HTTPError

func (response PostRefill500JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefillRequestObject struct {
	AccountId string `json:"account_id" bson:"account_id"`
	RefillId  string `json:"refill_id" bson:"refill_id"`
}

type DeleteRefillResponseObject interface {
	VisitDeleteRefillResponse(w http.ResponseWriter) error
}

type DeleteRefill204Response struct {
}

func (response DeleteRefill204Response) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRefill401JSONResponse HTTPError

func (response DeleteRefill401JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill403JSONResponse HTTPError

func (response DeleteRefill403JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill404JSONResponse HTTPError

func (response DeleteRefill404JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill500JSONResponse HTTPError

func (response DeleteRefill500JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactionsRequestObject struct {
	AccountId string                       `json:"account_id" bson:"account_id"`
	Params    GetAccountTransactionsParams `bson:"params"`
}

type GetAccountTransactionsResponseObject interface {
	VisitGetAccountTransactionsResponse(w http.ResponseWriter) error
}

type GetAccountTransactions200JSONResponse struct {
	Accounts *[]Transaction `json:"accounts,omitempty" bson:"accounts"`
	Limit    *int           `json:"limit,omitempty" bson:"limit"`
	MaxPage  *int           `json:"max_page,omitempty" bson:"max_page"`
	Page     *int           `json:"page,omitempty" bson:"page"`
}

func (response GetAccountTransactions200JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions401JSONResponse HTTPError

func (response GetAccountTransactions401JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions403JSONResponse HTTPError

func (response GetAccountTransactions403JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions500JSONResponse HTTPError

func (response GetAccountTransactions500JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionIdRequestObject struct {
	AccountId     string `json:"account_id" bson:"account_id"`
	TransactionId string `json:"transaction_id" bson:"transaction_id"`
}

type DeleteTransactionIdResponseObject interface {
	VisitDeleteTransactionIdResponse(w http.ResponseWriter) error
}

type DeleteTransactionId200JSONResponse HTTPError

func (response DeleteTransactionId200JSONResponse) VisitDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionId401JSONResponse HTTPError

func (response DeleteTransactionId401JSONResponse) VisitDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionId403JSONResponse HTTPError

func (response DeleteTransactionId403JSONResponse) VisitDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionId404JSONResponse HTTPError

func (response DeleteTransactionId404JSONResponse) VisitDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionId500JSONResponse HTTPError

func (response DeleteTransactionId500JSONResponse) VisitDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionIdRequestObject struct {
	AccountId     string `json:"account_id" bson:"account_id"`
	TransactionId string `json:"transaction_id" bson:"transaction_id"`
}

type GetTransactionIdResponseObject interface {
	VisitGetTransactionIdResponse(w http.ResponseWriter) error
}

type GetTransactionId200JSONResponse Transaction

func (response GetTransactionId200JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId401JSONResponse HTTPError

func (response GetTransactionId401JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId403JSONResponse HTTPError

func (response GetTransactionId403JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId404JSONResponse HTTPError

func (response GetTransactionId404JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId500JSONResponse HTTPError

func (response GetTransactionId500JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionIdRequestObject struct {
	AccountId     string                   `json:"account_id" bson:"account_id"`
	TransactionId string                   `json:"transaction_id" bson:"transaction_id"`
	Params        PatchTransactionIdParams `bson:"params"`
}

type PatchTransactionIdResponseObject interface {
	VisitPatchTransactionIdResponse(w http.ResponseWriter) error
}

type PatchTransactionId200JSONResponse HTTPError

func (response PatchTransactionId200JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId401JSONResponse HTTPError

func (response PatchTransactionId401JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId403JSONResponse HTTPError

func (response PatchTransactionId403JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId404JSONResponse HTTPError

func (response PatchTransactionId404JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId500JSONResponse HTTPError

func (response PatchTransactionId500JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemIdRequestObject struct {
	AccountId     string                       `json:"account_id" bson:"account_id"`
	TransactionId string                       `json:"transaction_id" bson:"transaction_id"`
	ItemId        string                       `json:"item_id" bson:"item_id"`
	Params        PatchTransactionItemIdParams `bson:"params"`
}

type PatchTransactionItemIdResponseObject interface {
	VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error
}

type PatchTransactionItemId200JSONResponse HTTPError

func (response PatchTransactionItemId200JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId401JSONResponse HTTPError

func (response PatchTransactionItemId401JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId403JSONResponse HTTPError

func (response PatchTransactionItemId403JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId404JSONResponse HTTPError

func (response PatchTransactionItemId404JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId500JSONResponse HTTPError

func (response PatchTransactionItemId500JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectAccountRequestObject struct {
	QrNonce string `json:"qr_nonce" bson:"qr_nonce"`
}

type ConnectAccountResponseObject interface {
	VisitConnectAccountResponse(w http.ResponseWriter) error
}

type ConnectAccount301ResponseHeaders struct {
	Location string `bson:"location"`
}

type ConnectAccount301Response struct {
	Headers ConnectAccount301ResponseHeaders `bson:"headers"`
}

func (response ConnectAccount301Response) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type ConnectAccount400JSONResponse HTTPError

func (response ConnectAccount400JSONResponse) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectAccount500JSONResponse HTTPError

func (response ConnectAccount500JSONResponse) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CallbackRequestObject struct {
	Params CallbackParams `bson:"params"`
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response Callback200JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Callback500JSONResponse HTTPError

func (response Callback500JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImagesRequestObject struct {
}

type GetCarouselImagesResponseObject interface {
	VisitGetCarouselImagesResponse(w http.ResponseWriter) error
}

type GetCarouselImages200JSONResponse []CarouselImage

func (response GetCarouselImages200JSONResponse) VisitGetCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImages500JSONResponse HTTPError

func (response GetCarouselImages500JSONResponse) VisitGetCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImageRequestObject struct {
	Body *multipart.Reader `bson:"body"`
}

type AddCarouselImageResponseObject interface {
	VisitAddCarouselImageResponse(w http.ResponseWriter) error
}

type AddCarouselImage201JSONResponse CarouselImage

func (response AddCarouselImage201JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage400JSONResponse HTTPError

func (response AddCarouselImage400JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage401JSONResponse HTTPError

func (response AddCarouselImage401JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage403JSONResponse HTTPError

func (response AddCarouselImage403JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage409JSONResponse HTTPError

func (response AddCarouselImage409JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage500JSONResponse HTTPError

func (response AddCarouselImage500JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImageRequestObject struct {
	ImageId string `json:"image_id" bson:"image_id"`
}

type DeleteCarouselImageResponseObject interface {
	VisitDeleteCarouselImageResponse(w http.ResponseWriter) error
}

type DeleteCarouselImage204Response struct {
}

func (response DeleteCarouselImage204Response) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCarouselImage401JSONResponse HTTPError

func (response DeleteCarouselImage401JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage403JSONResponse HTTPError

func (response DeleteCarouselImage403JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage404JSONResponse HTTPError

func (response DeleteCarouselImage404JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage500JSONResponse HTTPError

func (response DeleteCarouselImage500JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselTextsRequestObject struct {
}

type GetCarouselTextsResponseObject interface {
	VisitGetCarouselTextsResponse(w http.ResponseWriter) error
}

type GetCarouselTexts200JSONResponse []CarouselText

func (response GetCarouselTexts200JSONResponse) VisitGetCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselTexts500JSONResponse HTTPError

func (response GetCarouselTexts500JSONResponse) VisitGetCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselTextRequestObject struct {
	Body *AddCarouselTextJSONRequestBody `bson:"body"`
}

type AddCarouselTextResponseObject interface {
	VisitAddCarouselTextResponse(w http.ResponseWriter) error
}

type AddCarouselText201JSONResponse CarouselText

func (response AddCarouselText201JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText400JSONResponse HTTPError

func (response AddCarouselText400JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText401JSONResponse HTTPError

func (response AddCarouselText401JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText403JSONResponse HTTPError

func (response AddCarouselText403JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText409JSONResponse HTTPError

func (response AddCarouselText409JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText500JSONResponse HTTPError

func (response AddCarouselText500JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselTextRequestObject struct {
	TextId string `json:"text_id" bson:"text_id"`
}

type DeleteCarouselTextResponseObject interface {
	VisitDeleteCarouselTextResponse(w http.ResponseWriter) error
}

type DeleteCarouselText204Response struct {
}

func (response DeleteCarouselText204Response) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCarouselText401JSONResponse HTTPError

func (response DeleteCarouselText401JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText403JSONResponse HTTPError

func (response DeleteCarouselText403JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText404JSONResponse HTTPError

func (response DeleteCarouselText404JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText500JSONResponse HTTPError

func (response DeleteCarouselText500JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoriesRequestObject struct {
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter) error
}

type GetCategories200JSONResponse []MinifiedCategory

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategories500JSONResponse HTTPError

func (response GetCategories500JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCategoryRequestObject struct {
	Body *multipart.Reader `bson:"body"`
}

type PostCategoryResponseObject interface {
	VisitPostCategoryResponse(w http.ResponseWriter) error
}

type PostCategory201JSONResponse Category

func (response PostCategory201JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory400JSONResponse HTTPError

func (response PostCategory400JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory401JSONResponse HTTPError

func (response PostCategory401JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory403JSONResponse HTTPError

func (response PostCategory403JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory409JSONResponse HTTPError

func (response PostCategory409JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory500JSONResponse HTTPError

func (response PostCategory500JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryRequestObject struct {
	CategoryId string `json:"category_id" bson:"category_id"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory204Response struct {
}

func (response DeleteCategory204Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategory404JSONResponse HTTPError

func (response DeleteCategory404JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory500JSONResponse HTTPError

func (response DeleteCategory500JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryRequestObject struct {
	CategoryId string `json:"category_id" bson:"category_id"`
}

type GetCategoryResponseObject interface {
	VisitGetCategoryResponse(w http.ResponseWriter) error
}

type GetCategory200JSONResponse Category

func (response GetCategory200JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory404JSONResponse HTTPError

func (response GetCategory404JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory500JSONResponse HTTPError

func (response GetCategory500JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategoryRequestObject struct {
	CategoryId string            `json:"category_id" bson:"category_id"`
	Body       *multipart.Reader `bson:"body"`
}

type PatchCategoryResponseObject interface {
	VisitPatchCategoryResponse(w http.ResponseWriter) error
}

type PatchCategory200JSONResponse Category

func (response PatchCategory200JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory400JSONResponse HTTPError

func (response PatchCategory400JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory401JSONResponse HTTPError

func (response PatchCategory401JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory403JSONResponse HTTPError

func (response PatchCategory403JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory404JSONResponse HTTPError

func (response PatchCategory404JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory500JSONResponse HTTPError

func (response PatchCategory500JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostItemRequestObject struct {
	CategoryId string            `json:"category_id" bson:"category_id"`
	Body       *multipart.Reader `bson:"body"`
}

type PostItemResponseObject interface {
	VisitPostItemResponse(w http.ResponseWriter) error
}

type PostItem201JSONResponse Item

func (response PostItem201JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostItem400JSONResponse HTTPError

func (response PostItem400JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostItem401JSONResponse HTTPError

func (response PostItem401JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostItem403JSONResponse HTTPError

func (response PostItem403JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostItem409JSONResponse HTTPError

func (response PostItem409JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostItem500JSONResponse HTTPError

func (response PostItem500JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItemRequestObject struct {
	CategoryId string `json:"category_id" bson:"category_id"`
	ItemId     string `json:"item_id" bson:"item_id"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem401JSONResponse HTTPError

func (response DeleteItem401JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem403JSONResponse HTTPError

func (response DeleteItem403JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem404JSONResponse HTTPError

func (response DeleteItem404JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem500JSONResponse HTTPError

func (response DeleteItem500JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchItemRequestObject struct {
	CategoryId string            `json:"category_id" bson:"category_id"`
	ItemId     string            `json:"item_id" bson:"item_id"`
	Body       *multipart.Reader `bson:"body"`
}

type PatchItemResponseObject interface {
	VisitPatchItemResponse(w http.ResponseWriter) error
}

type PatchItem200JSONResponse Item

func (response PatchItem200JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem400JSONResponse HTTPError

func (response PatchItem400JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem401JSONResponse HTTPError

func (response PatchItem401JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem403JSONResponse HTTPError

func (response PatchItem403JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem404JSONResponse HTTPError

func (response PatchItem404JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem500JSONResponse HTTPError

func (response PatchItem500JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemPictureRequestObject struct {
	CategoryId string `json:"category_id" bson:"category_id"`
	ItemId     string `json:"item_id" bson:"item_id"`
}

type GetItemPictureResponseObject interface {
	VisitGetItemPictureResponse(w http.ResponseWriter) error
}

type GetItemPicture200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetItemPicture200ImagepngResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetItemPicture404JSONResponse HTTPError

func (response GetItemPicture404JSONResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemPicture500JSONResponse HTTPError

func (response GetItemPicture500JSONResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryPictureRequestObject struct {
	CategoryId openapi_types.File `json:"category_id" bson:"category_id"`
}

type GetCategoryPictureResponseObject interface {
	VisitGetCategoryPictureResponse(w http.ResponseWriter) error
}

type GetCategoryPicture200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetCategoryPicture200ImagepngResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetCategoryPicture404JSONResponse HTTPError

func (response GetCategoryPicture404JSONResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryPicture500JSONResponse HTTPError

func (response GetCategoryPicture500JSONResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRefillsRequestObject struct {
	Params GetRefillsParams `bson:"params"`
}

type GetRefillsResponseObject interface {
	VisitGetRefillsResponse(w http.ResponseWriter) error
}

type GetRefills200JSONResponse []Refill

func (response GetRefills200JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills401JSONResponse HTTPError

func (response GetRefills401JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills403JSONResponse HTTPError

func (response GetRefills403JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills500JSONResponse HTTPError

func (response GetRefills500JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsRequestObject struct {
	Params GetTransactionsParams `bson:"params"`
}

type GetTransactionsResponseObject interface {
	VisitGetTransactionsResponse(w http.ResponseWriter) error
}

type GetTransactions200JSONResponse struct {
	Limit        *int           `json:"limit,omitempty" bson:"limit"`
	Page         *int           `json:"page,omitempty" bson:"page"`
	Transactions *[]Transaction `json:"transactions,omitempty" bson:"transactions"`
}

func (response GetTransactions200JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions401JSONResponse HTTPError

func (response GetTransactions401JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions403JSONResponse HTTPError

func (response GetTransactions403JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions500JSONResponse HTTPError

func (response GetTransactions500JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /account)
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)

	// (GET /account/qr)
	GetAccountQR(ctx context.Context, request GetAccountQRRequestObject) (GetAccountQRResponseObject, error)

	// (GET /account/refills)
	GetSelfRefills(ctx context.Context, request GetSelfRefillsRequestObject) (GetSelfRefillsResponseObject, error)

	// (GET /account/transactions)
	GetCurrentAccountTransactions(ctx context.Context, request GetCurrentAccountTransactionsRequestObject) (GetCurrentAccountTransactionsResponseObject, error)

	// (POST /account/transactions)
	PutTransactions(ctx context.Context, request PutTransactionsRequestObject) (PutTransactionsResponseObject, error)

	// (GET /accounts)
	GetAccounts(ctx context.Context, request GetAccountsRequestObject) (GetAccountsResponseObject, error)

	// (POST /accounts)
	PutAccounts(ctx context.Context, request PutAccountsRequestObject) (PutAccountsResponseObject, error)

	// (DELETE /accounts/{account_id})
	DeleteAccountId(ctx context.Context, request DeleteAccountIdRequestObject) (DeleteAccountIdResponseObject, error)

	// (GET /accounts/{account_id})
	GetAccountId(ctx context.Context, request GetAccountIdRequestObject) (GetAccountIdResponseObject, error)

	// (PATCH /accounts/{account_id})
	PatchAccountId(ctx context.Context, request PatchAccountIdRequestObject) (PatchAccountIdResponseObject, error)

	// (GET /accounts/{account_id}/refills)
	GetAccountRefills(ctx context.Context, request GetAccountRefillsRequestObject) (GetAccountRefillsResponseObject, error)

	// (POST /accounts/{account_id}/refills)
	PostRefill(ctx context.Context, request PostRefillRequestObject) (PostRefillResponseObject, error)

	// (DELETE /accounts/{account_id}/refills/{refill_id})
	DeleteRefill(ctx context.Context, request DeleteRefillRequestObject) (DeleteRefillResponseObject, error)

	// (GET /accounts/{account_id}/transactions)
	GetAccountTransactions(ctx context.Context, request GetAccountTransactionsRequestObject) (GetAccountTransactionsResponseObject, error)

	// (DELETE /accounts/{account_id}/transactions/{transaction_id})
	DeleteTransactionId(ctx context.Context, request DeleteTransactionIdRequestObject) (DeleteTransactionIdResponseObject, error)

	// (GET /accounts/{account_id}/transactions/{transaction_id})
	GetTransactionId(ctx context.Context, request GetTransactionIdRequestObject) (GetTransactionIdResponseObject, error)

	// (PATCH /accounts/{account_id}/transactions/{transaction_id})
	PatchTransactionId(ctx context.Context, request PatchTransactionIdRequestObject) (PatchTransactionIdResponseObject, error)

	// (PATCH /accounts/{account_id}/transactions/{transaction_id}/{item_id})
	PatchTransactionItemId(ctx context.Context, request PatchTransactionItemIdRequestObject) (PatchTransactionItemIdResponseObject, error)

	// (GET /auth/google/begin/{qr_nonce})
	ConnectAccount(ctx context.Context, request ConnectAccountRequestObject) (ConnectAccountResponseObject, error)

	// (GET /auth/google/callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)

	// (GET /carousel/images)
	GetCarouselImages(ctx context.Context, request GetCarouselImagesRequestObject) (GetCarouselImagesResponseObject, error)

	// (POST /carousel/images)
	AddCarouselImage(ctx context.Context, request AddCarouselImageRequestObject) (AddCarouselImageResponseObject, error)

	// (DELETE /carousel/images/{image_id})
	DeleteCarouselImage(ctx context.Context, request DeleteCarouselImageRequestObject) (DeleteCarouselImageResponseObject, error)

	// (GET /carousel/texts)
	GetCarouselTexts(ctx context.Context, request GetCarouselTextsRequestObject) (GetCarouselTextsResponseObject, error)

	// (POST /carousel/texts)
	AddCarouselText(ctx context.Context, request AddCarouselTextRequestObject) (AddCarouselTextResponseObject, error)

	// (DELETE /carousel/texts/{text_id})
	DeleteCarouselText(ctx context.Context, request DeleteCarouselTextRequestObject) (DeleteCarouselTextResponseObject, error)

	// (GET /categories)
	GetCategories(ctx context.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)

	// (POST /categories)
	PostCategory(ctx context.Context, request PostCategoryRequestObject) (PostCategoryResponseObject, error)

	// (DELETE /categories/{category_id})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)

	// (GET /categories/{category_id})
	GetCategory(ctx context.Context, request GetCategoryRequestObject) (GetCategoryResponseObject, error)

	// (PATCH /categories/{category_id})
	PatchCategory(ctx context.Context, request PatchCategoryRequestObject) (PatchCategoryResponseObject, error)

	// (POST /categories/{category_id}/items)
	PostItem(ctx context.Context, request PostItemRequestObject) (PostItemResponseObject, error)

	// (DELETE /categories/{category_id}/items/{item_id})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)

	// (PATCH /categories/{category_id}/items/{item_id})
	PatchItem(ctx context.Context, request PatchItemRequestObject) (PatchItemResponseObject, error)

	// (GET /categories/{category_id}/items/{item_id}/picture)
	GetItemPicture(ctx context.Context, request GetItemPictureRequestObject) (GetItemPictureResponseObject, error)

	// (GET /categories/{category_id}/picture)
	GetCategoryPicture(ctx context.Context, request GetCategoryPictureRequestObject) (GetCategoryPictureResponseObject, error)

	// (GET /refills)
	GetRefills(ctx context.Context, request GetRefillsRequestObject) (GetRefillsResponseObject, error)

	// (GET /transactions)
	GetTransactions(ctx context.Context, request GetTransactionsRequestObject) (GetTransactionsResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface  `bson:"ssi"`
	middlewares []StrictMiddlewareFunc `bson:"middlewares"`
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx echo.Context) error {
	var request GetAccountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx.Request().Context(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		return validResponse.VisitGetAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountQR operation middleware
func (sh *strictHandler) GetAccountQR(ctx echo.Context) error {
	var request GetAccountQRRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountQR(ctx.Request().Context(), request.(GetAccountQRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountQR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountQRResponseObject); ok {
		return validResponse.VisitGetAccountQRResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSelfRefills operation middleware
func (sh *strictHandler) GetSelfRefills(ctx echo.Context, params GetSelfRefillsParams) error {
	var request GetSelfRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSelfRefills(ctx.Request().Context(), request.(GetSelfRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSelfRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSelfRefillsResponseObject); ok {
		return validResponse.VisitGetSelfRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentAccountTransactions operation middleware
func (sh *strictHandler) GetCurrentAccountTransactions(ctx echo.Context, params GetCurrentAccountTransactionsParams) error {
	var request GetCurrentAccountTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentAccountTransactions(ctx.Request().Context(), request.(GetCurrentAccountTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentAccountTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCurrentAccountTransactionsResponseObject); ok {
		return validResponse.VisitGetCurrentAccountTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutTransactions operation middleware
func (sh *strictHandler) PutTransactions(ctx echo.Context) error {
	var request PutTransactionsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutTransactions(ctx.Request().Context(), request.(PutTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutTransactionsResponseObject); ok {
		return validResponse.VisitPutTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccounts operation middleware
func (sh *strictHandler) GetAccounts(ctx echo.Context, params GetAccountsParams) error {
	var request GetAccountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccounts(ctx.Request().Context(), request.(GetAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountsResponseObject); ok {
		return validResponse.VisitGetAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PutAccounts operation middleware
func (sh *strictHandler) PutAccounts(ctx echo.Context) error {
	var request PutAccountsRequestObject

	var body PutAccountsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PutAccounts(ctx.Request().Context(), request.(PutAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PutAccountsResponseObject); ok {
		return validResponse.VisitPutAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteAccountId operation middleware
func (sh *strictHandler) DeleteAccountId(ctx echo.Context, accountId string) error {
	var request DeleteAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccountId(ctx.Request().Context(), request.(DeleteAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAccountIdResponseObject); ok {
		return validResponse.VisitDeleteAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountId operation middleware
func (sh *strictHandler) GetAccountId(ctx echo.Context, accountId string) error {
	var request GetAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountId(ctx.Request().Context(), request.(GetAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountIdResponseObject); ok {
		return validResponse.VisitGetAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchAccountId operation middleware
func (sh *strictHandler) PatchAccountId(ctx echo.Context, accountId string) error {
	var request PatchAccountIdRequestObject

	request.AccountId = accountId

	var body PatchAccountIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAccountId(ctx.Request().Context(), request.(PatchAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchAccountIdResponseObject); ok {
		return validResponse.VisitPatchAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountRefills operation middleware
func (sh *strictHandler) GetAccountRefills(ctx echo.Context, accountId string, params GetAccountRefillsParams) error {
	var request GetAccountRefillsRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountRefills(ctx.Request().Context(), request.(GetAccountRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountRefillsResponseObject); ok {
		return validResponse.VisitGetAccountRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostRefill operation middleware
func (sh *strictHandler) PostRefill(ctx echo.Context, accountId string, params PostRefillParams) error {
	var request PostRefillRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefill(ctx.Request().Context(), request.(PostRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRefillResponseObject); ok {
		return validResponse.VisitPostRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteRefill operation middleware
func (sh *strictHandler) DeleteRefill(ctx echo.Context, accountId string, refillId string) error {
	var request DeleteRefillRequestObject

	request.AccountId = accountId
	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRefill(ctx.Request().Context(), request.(DeleteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRefillResponseObject); ok {
		return validResponse.VisitDeleteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountTransactions operation middleware
func (sh *strictHandler) GetAccountTransactions(ctx echo.Context, accountId string, params GetAccountTransactionsParams) error {
	var request GetAccountTransactionsRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountTransactions(ctx.Request().Context(), request.(GetAccountTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountTransactionsResponseObject); ok {
		return validResponse.VisitGetAccountTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteTransactionId operation middleware
func (sh *strictHandler) DeleteTransactionId(ctx echo.Context, accountId string, transactionId string) error {
	var request DeleteTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTransactionId(ctx.Request().Context(), request.(DeleteTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTransactionIdResponseObject); ok {
		return validResponse.VisitDeleteTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTransactionId operation middleware
func (sh *strictHandler) GetTransactionId(ctx echo.Context, accountId string, transactionId string) error {
	var request GetTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionId(ctx.Request().Context(), request.(GetTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionIdResponseObject); ok {
		return validResponse.VisitGetTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchTransactionId operation middleware
func (sh *strictHandler) PatchTransactionId(ctx echo.Context, accountId string, transactionId string, params PatchTransactionIdParams) error {
	var request PatchTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTransactionId(ctx.Request().Context(), request.(PatchTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTransactionIdResponseObject); ok {
		return validResponse.VisitPatchTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchTransactionItemId operation middleware
func (sh *strictHandler) PatchTransactionItemId(ctx echo.Context, accountId string, transactionId string, itemId string, params PatchTransactionItemIdParams) error {
	var request PatchTransactionItemIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId
	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTransactionItemId(ctx.Request().Context(), request.(PatchTransactionItemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTransactionItemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTransactionItemIdResponseObject); ok {
		return validResponse.VisitPatchTransactionItemIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ConnectAccount operation middleware
func (sh *strictHandler) ConnectAccount(ctx echo.Context, qrNonce string) error {
	var request ConnectAccountRequestObject

	request.QrNonce = qrNonce

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectAccount(ctx.Request().Context(), request.(ConnectAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectAccountResponseObject); ok {
		return validResponse.VisitConnectAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Callback operation middleware
func (sh *strictHandler) Callback(ctx echo.Context, params CallbackParams) error {
	var request CallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx.Request().Context(), request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		return validResponse.VisitCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselImages operation middleware
func (sh *strictHandler) GetCarouselImages(ctx echo.Context) error {
	var request GetCarouselImagesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselImages(ctx.Request().Context(), request.(GetCarouselImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselImagesResponseObject); ok {
		return validResponse.VisitGetCarouselImagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AddCarouselImage operation middleware
func (sh *strictHandler) AddCarouselImage(ctx echo.Context) error {
	var request AddCarouselImageRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCarouselImage(ctx.Request().Context(), request.(AddCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCarouselImageResponseObject); ok {
		return validResponse.VisitAddCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteCarouselImage operation middleware
func (sh *strictHandler) DeleteCarouselImage(ctx echo.Context, imageId string) error {
	var request DeleteCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCarouselImage(ctx.Request().Context(), request.(DeleteCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCarouselImageResponseObject); ok {
		return validResponse.VisitDeleteCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselTexts operation middleware
func (sh *strictHandler) GetCarouselTexts(ctx echo.Context) error {
	var request GetCarouselTextsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselTexts(ctx.Request().Context(), request.(GetCarouselTextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselTexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselTextsResponseObject); ok {
		return validResponse.VisitGetCarouselTextsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AddCarouselText operation middleware
func (sh *strictHandler) AddCarouselText(ctx echo.Context) error {
	var request AddCarouselTextRequestObject

	var body AddCarouselTextJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCarouselText(ctx.Request().Context(), request.(AddCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCarouselTextResponseObject); ok {
		return validResponse.VisitAddCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteCarouselText operation middleware
func (sh *strictHandler) DeleteCarouselText(ctx echo.Context, textId string) error {
	var request DeleteCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCarouselText(ctx.Request().Context(), request.(DeleteCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCarouselTextResponseObject); ok {
		return validResponse.VisitDeleteCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(ctx echo.Context) error {
	var request GetCategoriesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx.Request().Context(), request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		return validResponse.VisitGetCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostCategory operation middleware
func (sh *strictHandler) PostCategory(ctx echo.Context) error {
	var request PostCategoryRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCategory(ctx.Request().Context(), request.(PostCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCategoryResponseObject); ok {
		return validResponse.VisitPostCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(ctx echo.Context, categoryId string) error {
	var request DeleteCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx.Request().Context(), request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		return validResponse.VisitDeleteCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategory operation middleware
func (sh *strictHandler) GetCategory(ctx echo.Context, categoryId string) error {
	var request GetCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategory(ctx.Request().Context(), request.(GetCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryResponseObject); ok {
		return validResponse.VisitGetCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchCategory operation middleware
func (sh *strictHandler) PatchCategory(ctx echo.Context, categoryId string) error {
	var request PatchCategoryRequestObject

	request.CategoryId = categoryId

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCategory(ctx.Request().Context(), request.(PatchCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchCategoryResponseObject); ok {
		return validResponse.VisitPatchCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostItem operation middleware
func (sh *strictHandler) PostItem(ctx echo.Context, categoryId string) error {
	var request PostItemRequestObject

	request.CategoryId = categoryId

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostItem(ctx.Request().Context(), request.(PostItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostItemResponseObject); ok {
		return validResponse.VisitPostItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(ctx echo.Context, categoryId string, itemId string) error {
	var request DeleteItemRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx.Request().Context(), request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		return validResponse.VisitDeleteItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchItem operation middleware
func (sh *strictHandler) PatchItem(ctx echo.Context, categoryId string, itemId string) error {
	var request PatchItemRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchItem(ctx.Request().Context(), request.(PatchItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchItemResponseObject); ok {
		return validResponse.VisitPatchItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetItemPicture operation middleware
func (sh *strictHandler) GetItemPicture(ctx echo.Context, categoryId string, itemId string) error {
	var request GetItemPictureRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemPicture(ctx.Request().Context(), request.(GetItemPictureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemPicture")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetItemPictureResponseObject); ok {
		return validResponse.VisitGetItemPictureResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategoryPicture operation middleware
func (sh *strictHandler) GetCategoryPicture(ctx echo.Context, categoryId openapi_types.File) error {
	var request GetCategoryPictureRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryPicture(ctx.Request().Context(), request.(GetCategoryPictureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryPicture")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryPictureResponseObject); ok {
		return validResponse.VisitGetCategoryPictureResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRefills operation middleware
func (sh *strictHandler) GetRefills(ctx echo.Context, params GetRefillsParams) error {
	var request GetRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRefills(ctx.Request().Context(), request.(GetRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRefillsResponseObject); ok {
		return validResponse.VisitGetRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTransactions operation middleware
func (sh *strictHandler) GetTransactions(ctx echo.Context, params GetTransactionsParams) error {
	var request GetTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactions(ctx.Request().Context(), request.(GetTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionsResponseObject); ok {
		return validResponse.VisitGetTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd3XLbNhZ+FQ67O21n5FCunTbxne06Xc/WaeI4sxedjAYijyQ0FKEAoBOvRzf7PPtU",
	"+yQ7+CEJkOCPbFmWbOYmMgngHBycnw8HIHDrh2S+IAkknPlHtz4LZzBH8udxGJI04eLngpIFUI5Bvhij",
	"GCUhiJ/wDc0XMfhH+8PhcOBPCJ0j7h/5OOE/H/oDn98sQP0JU6D+cuDDHOF4hKKIApOt6SKMU5xMRYkJ",
	"poyPEjQH52scicd/ozDxj/zvgoL9QPMefPx4/qsoGaOmdiiI3yHHJJF8YA5z1ta0lsmlWXeZdxNRim5k",
	"2ySGrk2JosuBzzjiXet8kGWXshNfUkwh8o/+FIKxhGcKoCz3QT6ImtmSPDJ+PuV9I+O/IOSCU5cMjm79",
	"CFhI8UL87R/55luPTDw+Aw9phRr4kKRzwTKFOeEwykiD6ME4JuFniATpXLucBe0RHfjf9kSze9eIii4z",
	"0X7Oqqh9aVbWb04yYka/9NiV+kNiqO8H42kE8on+NfqK+Ww0hgQmmAtxzmE+BuoPfBTNcWJ3rqjdvUsf",
	"8jr2g39hPjspyOqXFxl1/fexYmJp1NbaZ/daPq7vtn4ymqeMjxjwUYioEG72nHy2O1ouV7HJU0RJyiA+",
	"n6MpVB1Pd9PHooFRSuNqn2TbHidehNkiRjdVPlx2VTToMgmL74+LmKDIwX3WqVZ+cjc6xgmiHTiULTcx",
	"dgXfHI48JDGhVY5OxeNs1LmoaQ7id2/kP9fwdR8frvmxCQsuVx4ZzaDqS5sMTiloRX9YSaynf7IVd5c4",
	"TAm9uZeJdIl35xzmonAWRe3+vEXz3DuEKaWQcC/MWHNIZYFDnlJhRrja2O84+SyEowt1b9elFDromQSz",
	"HrvkeUYpoackUjLM3NsYRSPRMjCujHKMowgSw8ElhI8mJE2kHlKUMCQjnvX8Cx3h5BrFODJIN3n4M0pP",
	"UHSZEz6j9I1B+4xS7bTfEv5GEzmj9Kqgb794f3me0V8O/H9cXb2T3a3qDojHo5BErTjEkNdSxDbGtGtr",
	"qnShijE5YpUhkJpWYQnNpZxjmHALbh78ZIPNg5+cYHOc3oxiPMd3qpxp3EjZVMkz6JdlNRU6dj/X2N3U",
	"6mjdx8xq26T4roi/E7IVw98AaxX5gaUP5vDao1Vj//WQtqDeDIG0dHIHkd6gsQTPwuCzvyzIUxTpYPmC",
	"jZO8gvjrLeHZA2G8uQkZXuot4V5IkgQ0sr3AjOFk6k0wxBHz/n5dwD4PxRRQdOPBN8xMfOglhHuZwzIc",
	"ifU8K4uZfIzimHyFSOhSysAT0wqSUjlKWckQJaKk9dpDXEVTPAdvDEoW2kF57y894VW8hIipSTd3ecGm",
	"bwk/NSXAploIb6QM1KMM+ioRnGUSKN4YXvOCTd3u1Cp9rCRQeXyNcKzH8IJNbfd7gRM8wRCtI4I/gaDs",
	"Msa38LU29XDv7EFLTmDVeXupmx1n3zW9rteJtY60aGjVGYY9dHUdeOIxfG2RudrIu8Zo3Dpajxmf7xea",
	"G8PyJUxwHDs0SsPv7q5SMWfJx98fvhx6P+wPX7wc/u8///3Rt4VVo05JCDFEo/FN52lW9wkZYylEI8Qt",
	"A60fN12+OyudBlrJvAGKGcLP5Zq1bXbCZLB+cHPUlcEZFSoLUVdRwNKCKG3acQ8kns+QO02VDZ6yWXM5",
	"LdxpAIx29CgMfE44ikchYRXdcGiGM30le1AaPKPVJissd6yKWDjMR4WFtVqRLN99GB5HaprHgdW7u8qs",
	"ouWMI6qz2OgzJKMQURiRiUzgJ5jNoNkEnEC4SlOTKL24EhRPEYU/JtWXbwrypTenOTd2/zbdN2e/avvk",
	"7o/VF6lnVmQ4HMPw58ODyd5+9PrV3stfDsZ7r38Jo70QvX6Ffn55cPhLFJnhIk2xM539cREhDlbOfcsW",
	"057BElnFNtWobBnYruGyR9TPBFGXxl80AmFKMb/5IMrrcRcuZIRSPpPWKLo5AxTJlT0lSr28WJjbAv8T",
	"pL1ZtUJCPmMoap0cX44+nH34UK0oOMHJhIiqMQ4hYVDYiH9xfuUPfLnM5s84X7CjICALSFSq5wWh00BX",
	"CuaYB9IPYC597B8LSI7fnXt73gkS/F8DZWrk9l8MX+zvi7KiKbTA/pF/8GL44kDMGhCfSVEEqEgR2AP/",
	"G6gE0xgxHObjrot/zzzRGzGCovTAn8K9mxCWKX+fR6rucb5QSoEtSMLU6P00HKqlpoSDYhwtFjEOZd3g",
	"L6awrFKPWlTb0f2tKS0vHpXSoWkYAmOTNI5vvCkpS0XQPRzur9TPJuaK1QoHL3bmcznwX64o4TtTPk84",
	"0ATFHgN6DdQDXbCwWv/oz1ttc39+WgqQg6bMWDNn/idRPFPj4AutV8P3l15IIrlGrLubSV08+o2Qqcw1",
	"NqpyxzbqdPn9Zbs2y1XoYJFMbSG3R792JdPc99rVql3ima1ZVM6z5ZjVagiKYy8r51CCDxBPLvPXC0TR",
	"HDhQJtkohV00BS9J9XYTGWy+pCCHXceMhfBJA0NO1ZlYBRDI9mQoLzA88xZAPd2ai1CWflqFkpxceJGx",
	"5KPEUkNCTnVGkUp9OFRev6nAvTLZsyTqThSSaHWSn+4ZjDpBf52vq6D9qopv3JKFYRCK/707ppzZo23N",
	"pgG0mrRV2GHXpwrZaB9/ZZd+ymb+BsccqDe+8fK8pdu6S1a2Wgbq3kbnRIB3yki6ZuD5FLA1YTdH30YL",
	"DSVbC3cs2AVsPrKXOBwebIZ0sb2nk2ewzPqTELlOcZYm43Kvm4e8BL6aFlXxBO/Ssu2XtHZ9I2Cp5BYM",
	"uAXwHmO8BdXDzVCt7vXYkUhY0ncjHLL62JeVMCfrrGmW1FSpblrUGicXem+voNoxTkYwQWnM/aPhoEMk",
	"S/KYmfPeSK4aLXN6+y6CjxzCjHTGhsLXylmTtUa8S+ApTZh02Y+cWXn8WLiF3slIwNamderi8XEUeSgx",
	"0y5iqhchjsaIgSsqG15G70M+IdHN2iRibLRyhYtmdpebmFDWmn/3xKSyHvYszedw+HozVE9JMomxWrja",
	"SZs1MUVwW+ySWCozjsG1NfhX+dz4Lso2YPVaq/B51AYVzn+tfmiFFYbgM2OBx9zBUexY4DQFxxy4If9z",
	"WO3QMzWSHn+vHOHciwx3WmRbdVlt+yxpfSPYEI63beGtN91dBaeIh7OqOar9JrXB7J2otU0WuH447Nit",
	"tVwul49j7r099/Z8L+C66rqvTCEltfZfxN+OC8EP6wIG/bpzv+68e+vOvVvdZrdarLh3WlLLjaWElAjT",
	"PnLLXOSx3DXcydTzzx1ayTWtFKzPzDIDrzPoDWnYCYq87ECI3pH0jqTdkbTCs+BW/WjLNaovVpiH6tyO",
	"yjZupeMpyNlOx6aWy6HPa+6msRKqx/cpm+1a99/dYeNdP63q9/n1+/z6vQ2b9IsN+6/qnWNwax6I1m0l",
	"tWmToipifpMcbS3MsfvhIGmLZmuWnxrVqAdRD0nVfejWLruJpmXfBjv/DXhv5A9p5Nu2Bbs38x038+YF",
	"ZaP49yyH4Y7F5d7qqxMl+Kok1kC9Zi5TT3XDc5seb2x70oY/OZ90xxlKcKtPfZJzlVXcmqjX1bdxmPf+",
	"rUxWH8vioFccxLVOR2rSeygPah7w0nvRp+xFB5YPJVT5gyfkS1M+C6byjJBgDFOcBLdf6Ege0rx0XZqw",
	"4hklp50PJNEliwN2Gp3o+0t9kLTTsWQ9uNfE7ECZVvkjrghT0SH9zYySnEeEGLMMtzq3SbbxO1FacLeG",
	"6nldPuLS+K6dlWIoeIjieIzCz641WPXGmxCqNdT74ziVSuVW7IYKJcXOiLaotNmIOhLHHcT0q3uETItS",
	"l9WTzWU3tv9grF0+NyjU1+UE8jyn5kXOrKyny7rOGDGvRmL+JrYD2rdIddwVuAWjlA1GJtW2b0lL4q9I",
	"/ziKbFE07ZufpzHHC0R5MCF0vhchjrp32HX/leszQYtfTxtT2XUsH3AjWUk1+v1kz+P7VDEVK19+slOg",
	"3HAJDh8d3Krr6Tp+r9rmN1S5suvomK/ImnRN5TWT69/gpYNvP9l9UCWWTntHZ7V1BsThG++IcVTRBohz",
	"pQtsDuHIax2fA8DRdy/W4psr9f4hPgt0XB/ZBG0Ep4+JbJRK9MCmBza775eDW/Hf6rDG6S1sVKMdRkdQ",
	"oxt0LYcoBntIs5vbMYSzfiqIRl69gKF9W7pR1IlmjLcPD2UqFyLuDpxpzaoZgu74TaFxo0j1q8LT4uUD",
	"5XHMSwidICe73uMx8E09Xz22eZKHimXattv4xnABtp8Obo27dLoinBr3kIGb/HVHYGM06AA39sWND/JR",
	"3uGGdWlng70VSerDe72KFKF9C/VjuME40avcirCl+cCoBswiKm6Vzj0IaCrdJ7cW3DTscVM/qe1jXTNk",
	"CvIJZoeZld7xWZ1VnasXT9Q5Zbey1+UOH2EmV8dP7436DPUWuiPlZLp4Ivv7gbbJXOJ2Ser1NjiljW3X",
	"789wefy1/R3esJ4ZaOtMpcbi5DTl+RncA86F1oM4hj3i6H3ZM/Vlq4CNwLgDvT4xqJyfl5V1ZAeF3N7l",
	"r58r9Hi4W417I2jNPHZS/07qnitmk8ZnmZJH0vp2HXqy6vlEkuNCT9dwv3Z/t3Z/xnl/xvkzOU3PPmV0",
	"pfNERblrsA31B0IjoOzHloO0+hu9t/Ckz+4nc3Y+lbOsT/c/QLQ/wPPJHeApa4qmlCNIaewf+TPOF0dB",
	"EJMQxTPC+NGr4athgBY4uN73jdaqhxTEiEPkceKlDOj3TA4OJFxLwjitRrBWNV1HA8W9p/ZBN6xT9dKx",
	"y9WDa7o1k12M8wMFFHtzksDNj+Xjyl0tFRtoheOTBujhRGIPNiOLyjwBg6uVc1mPJB5DMdQ0oIzbxYH5",
	"yZKHkqj4QDunrXcPLz8t/x8AAP//Dswa6gSsAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
