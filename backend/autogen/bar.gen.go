// Package autogen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package autogen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Admin_authScopes    = "admin_auth.Scopes"
	AuthScopes          = "auth.Scopes"
	Local_tokenScopes   = "local_token.Scopes"
	Not_onboardedScopes = "not_onboarded.Scopes"
)

// Defines values for AccountPriceRole.
const (
	AccountPriceCeten  AccountPriceRole = "ceten"
	AccountPriceExte   AccountPriceRole = "exte"
	AccountPriceNormal AccountPriceRole = "normal"
	AccountPriceStaff  AccountPriceRole = "staff"
	AccountPriceVIP    AccountPriceRole = "vip"
)

// Defines values for AccountRestrictions.
const (
	AccountBlocked          AccountRestrictions = "blocked"
	AccountRemoteRestricted AccountRestrictions = "remote_restricted"
)

// Defines values for AccountRole.
const (
	AccountAdmin               AccountRole = "admin"
	AccountGhost               AccountRole = "ghost"
	AccountMember              AccountRole = "member"
	AccountStudent             AccountRole = "student"
	AccountStudentWithBenefits AccountRole = "student_with_benefits"
	AccountSuperAdmin          AccountRole = "superadmin"
)

// Defines values for AccountState.
const (
	AccountNotOnBoarded AccountState = "not_onboarded"
	AccountOK           AccountState = "account_ok"
)

// Defines values for ErrorCodes.
const (
	ErrAccountNotFound     ErrorCodes = "account_not_found"
	ErrBadRequest          ErrorCodes = "bad_request"
	ErrCategoryNotFound    ErrorCodes = "category_not_found"
	ErrForbidden           ErrorCodes = "forbidden"
	ErrImageNotFound       ErrorCodes = "image_not_found"
	ErrInternalServerError ErrorCodes = "internal_server_error"
	ErrItemNotFound        ErrorCodes = "item_not_found"
	ErrNotAuthenticated    ErrorCodes = "not_authenticated"
	ErrQRInvalid           ErrorCodes = "qr_invalid"
	ErrRefillNotFound      ErrorCodes = "refill_not_found"
	ErrTextNotFound        ErrorCodes = "text_not_found"
	ErrTransactionNotFound ErrorCodes = "transaction_not_found"
)

// Defines values for ItemState.
const (
	ItemBuyable    ItemState = "buyable"
	ItemNotBuyable ItemState = "not_buyable"
)

// Defines values for Messages.
const (
	MsgAccountAlreadyExists Messages = "Account already exists"
	MsgAccountNotAllowed    Messages = "Account is not allowed to use ressource"
	MsgAccountNotAvailable  Messages = "Account cannot use ressource at the time being"
	MsgAccountNotFound      Messages = "Account not found"
	MsgBadRequest           Messages = "Bad request"
	MsgCategoryNotFound     Messages = "Category does not exists"
	MsgImageNotFound        Messages = "Image does not exists"
	MsgInternalServerError  Messages = "Internal server error"
	MsgItemNotFound         Messages = "Item does not exists"
	MsgMissingFields        Messages = "Missing fields %v"
	MsgNotAuthenticated     Messages = "You are not authenticated"
	MsgNotConnected         Messages = "Not connected"
	MsgQRInvalid            Messages = "Invalid QR Code nonce"
	MsgRefillNotFound       Messages = "Refill does not exists"
	MsgTextNotFound         Messages = "Text does not exists"
	MsgTransactionNotFound  Messages = "Transaction does not exists"
)

// Defines values for RefillState.
const (
	Canceled RefillState = "canceled"
	Valid    RefillState = "valid"
)

// Defines values for TransactionItemState.
const (
	TransactionItemCanceled    TransactionItemState = "canceled"
	TransactionItemFinished    TransactionItemState = "finished"
	TransactionItemStarted     TransactionItemState = "started"
	TransactionItemTakenCareOf TransactionItemState = "taken_care_of"
)

// Defines values for TransactionState.
const (
	TransactionCanceled    TransactionState = "canceled"
	TransactionFinished    TransactionState = "finished"
	TransactionStarted     TransactionState = "started"
	TransactionTakenCareOf TransactionState = "taken_care_of"
)

// Account defines model for Account.
type Account struct {
	Balance       int64   `json:"balance" bson:"balance"`
	CardId        string  `json:"card_id" bson:"card_id"`
	CardPin       string  `json:"-" bson:"card_pin"`
	DeletedAt     *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy     *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	EmailAddress  string  `json:"email_address" bson:"email_address"`
	FirstName     string  `json:"first_name" bson:"first_name"`
	GoogleId      *string `json:"google_id,omitempty" bson:"google_id"`
	GooglePicture *string `json:"google_picture,omitempty" bson:"google_picture"`
	Id            UUID    `json:"id" bson:"id"`
	LastName      string  `json:"last_name" bson:"last_name"`

	// PriceRole Role of the account
	PriceRole    AccountPriceRole      `json:"price_role" bson:"price_role"`
	Restrictions []AccountRestrictions `json:"restrictions" bson:"restrictions"`

	// Role Role of the account
	Role AccountRole `json:"role" bson:"role"`

	// State State of the account
	State AccountState `json:"state" bson:"state"`
}

// AccountPriceRole Role of the account
type AccountPriceRole string

// AccountRestrictions Restrictions of the account
type AccountRestrictions string

// AccountRole Role of the account
type AccountRole string

// AccountState State of the account
type AccountState string

// CarouselImage defines model for CarouselImage.
type CarouselImage struct {
	DeletedAt *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id        UUID    `json:"id" bson:"id"`

	// ImageUrl Image to display
	ImageUrl string `json:"image_url" bson:"image_url"`
}

// CarouselImageUpload defines model for CarouselImageUpload.
type CarouselImageUpload struct {
	// Image Image to display
	Image openapi_types.File `json:"image" bson:"image"`
}

// CarouselText defines model for CarouselText.
type CarouselText struct {
	// Color Color of the text
	Color     string  `json:"color" bson:"color"`
	DeletedAt *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id        UUID    `json:"id" bson:"id"`

	// Text Text to display
	Text string `json:"text" bson:"text"`
}

// CarouselTextCreate defines model for CarouselTextCreate.
type CarouselTextCreate struct {
	// Color Color of the text
	Color *string `json:"color,omitempty" bson:"color"`

	// Text Text to display
	Text string `json:"text" bson:"text"`
}

// Category defines model for Category.
type Category struct {
	DeletedAt *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id        UUID    `json:"id" bson:"id"`

	// Name Name of the current category
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the current category
	PictureUri string `json:"picture_uri" bson:"picture_uri"`
}

// ErrorCodes defines model for ErrorCodes.
type ErrorCodes string

// HTTPError defines model for HTTPError.
type HTTPError struct {
	ErrorCode ErrorCodes `json:"error_code" bson:"error_code"`
	Message   Messages   `json:"message" bson:"message"`
}

// Item defines model for Item.
type Item struct {
	AmountLeft    uint64      `json:"amount_left" bson:"amount_left"`
	BuyLimit      *uint64     `json:"buy_limit,omitempty" bson:"buy_limit"`
	CategoryId    UUID        `json:"category_id" bson:"category_id"`
	DeletedAt     *uint64     `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy     *UUID       `json:"deleted_by,omitempty" bson:"deleted_by"`
	DisplayPrice  *uint64     `json:"display_price,omitempty" bson:"display_price"`
	DisplayPrices *ItemPrices `json:"display_prices,omitempty" bson:"display_prices"`
	Id            UUID        `json:"id" bson:"id"`

	// Name Name of the current item
	Name          string `json:"name" bson:"name"`
	OptimalAmount uint64 `json:"optimal_amount" bson:"optimal_amount"`

	// PictureUri Link to picture of the current item
	PictureUri      string     `json:"picture_uri" bson:"picture_uri"`
	Prices          ItemPrices `json:"prices" bson:"prices"`
	Promotion       *uint64    `json:"promotion,omitempty" bson:"promotion"`
	PromotionEndsAt *uint64    `json:"promotion_ends_at,omitempty" bson:"promotion_ends_at"`

	// State State of the item
	State ItemState `json:"state" bson:"state"`
}

// ItemPrices defines model for ItemPrices.
type ItemPrices struct {
	Ceten  uint64 `json:"ceten" bson:"ceten"`
	Exte   uint64 `json:"exte" bson:"exte"`
	Normal uint64 `json:"normal" bson:"normal"`
	Staff  uint64 `json:"staff" bson:"staff"`
	Vip    uint64 `json:"vip" bson:"vip"`
}

// ItemState State of the item
type ItemState string

// Messages defines model for Messages.
type Messages string

// NewAccount defines model for NewAccount.
type NewAccount struct {
	Balance      int64   `json:"balance" bson:"balance"`
	CardId       *string `json:"card_id,omitempty" bson:"card_id"`
	EmailAddress string  `json:"email_address" bson:"email_address"`
	FirstName    string  `json:"first_name" bson:"first_name"`
	LastName     string  `json:"last_name" bson:"last_name"`

	// PriceRole Role of the account
	PriceRole *AccountPriceRole `json:"price_role,omitempty" bson:"price_role"`

	// Role Role of the account
	Role AccountRole `json:"role" bson:"role"`
}

// NewCategory defines model for NewCategory.
type NewCategory struct {
	// Name Name of the current category
	Name    string `json:"name" bson:"name"`
	Picture string `json:"picture" bson:"picture"`
}

// NewItem defines model for NewItem.
type NewItem struct {
	AmountLeft uint64  `json:"amount_left" bson:"amount_left"`
	BuyLimit   *uint64 `json:"buy_limit,omitempty" bson:"buy_limit"`

	// Name Name of the current item
	Name          string `json:"name" bson:"name"`
	OptimalAmount uint64 `json:"optimal_amount" bson:"optimal_amount"`

	// Picture Picture of the current item
	Picture         string     `json:"picture" bson:"picture"`
	Prices          ItemPrices `json:"prices" bson:"prices"`
	Promotion       *uint64    `json:"promotion,omitempty" bson:"promotion"`
	PromotionEndsAt *uint64    `json:"promotion_ends_at,omitempty" bson:"promotion_ends_at"`

	// State State of the item
	State ItemState `json:"state" bson:"state"`
}

// NewTransaction defines model for NewTransaction.
type NewTransaction struct {
	// CardPin Pin of the card
	CardPin string               `json:"card_pin" bson:"card_pin"`
	Items   []NewTransactionItem `json:"items" bson:"items"`
}

// NewTransactionItem defines model for NewTransactionItem.
type NewTransactionItem struct {
	Amount uint64 `json:"amount" bson:"amount"`
	ItemId UUID   `json:"item_id" bson:"item_id"`
}

// Refill defines model for Refill.
type Refill struct {
	AccountId UUID `json:"account_id" bson:"account_id"`

	// AccountName Name of the account
	AccountName    string      `json:"account_name" bson:"account_name"`
	Amount         uint64      `json:"amount" bson:"amount"`
	CanceledBy     *UUID       `json:"canceled_by,omitempty" bson:"canceled_by"`
	CanceledByName *string     `json:"canceled_by_name,omitempty" bson:"canceled_by_name"`
	DeletedAt      *uint64     `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy      *UUID       `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id             UUID        `json:"id" bson:"id"`
	IssuedAt       uint64      `json:"issued_at" bson:"issued_at"`
	IssuedBy       UUID        `json:"issued_by" bson:"issued_by"`
	IssuedByName   string      `json:"issued_by_name" bson:"issued_by_name"`
	State          RefillState `json:"state" bson:"state"`
}

// RefillState defines model for RefillState.
type RefillState string

// Transaction defines model for Transaction.
type Transaction struct {
	AccountId string            `json:"account_id" bson:"account_id"`
	DeletedAt *uint64           `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID             `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id        UUID              `json:"id" bson:"id"`
	Items     []TransactionItem `json:"items" bson:"items"`
	State     TransactionState  `json:"state" bson:"state"`
	TotalCost uint64            `json:"total_cost" bson:"total_cost"`
}

// TransactionItem defines model for TransactionItem.
type TransactionItem struct {
	ItemAmount uint64 `json:"item_amount" bson:"item_amount"`
	ItemId     UUID   `json:"item_id" bson:"item_id"`

	// ItemName Name of the current item
	ItemName string `json:"item_name" bson:"item_name"`

	// PictureUri Link to picture of the current item
	PictureUri string               `json:"picture_uri" bson:"picture_uri"`
	State      TransactionItemState `json:"state" bson:"state"`
	TotalCost  uint64               `json:"total_cost" bson:"total_cost"`
	UnitCost   uint64               `json:"unit_cost" bson:"unit_cost"`
}

// TransactionItemState defines model for TransactionItemState.
type TransactionItemState string

// TransactionState defines model for TransactionState.
type TransactionState string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// UpdateAccountAdmin defines model for UpdateAccountAdmin.
type UpdateAccountAdmin struct {
	Balance      *int64  `json:"balance,omitempty" bson:"balance"`
	CardId       *string `json:"card_id,omitempty" bson:"card_id"`
	EmailAddress *string `json:"email_address,omitempty" bson:"email_address"`
	FirstName    *string `json:"first_name,omitempty" bson:"first_name"`
	LastName     *string `json:"last_name,omitempty" bson:"last_name"`

	// PriceRole Role of the account
	PriceRole    *AccountPriceRole      `json:"price_role,omitempty" bson:"price_role"`
	Restrictions *[]AccountRestrictions `json:"restrictions,omitempty" bson:"restrictions"`

	// Role Role of the account
	Role *AccountRole `json:"role,omitempty" bson:"role"`

	// State State of the account
	State *AccountState `json:"state,omitempty" bson:"state"`
}

// UpdateCategory defines model for UpdateCategory.
type UpdateCategory struct {
	// Name Name of the current category
	Name    *string `json:"name,omitempty" bson:"name"`
	Picture *string `json:"picture,omitempty" bson:"picture"`
}

// UpdateItem defines model for UpdateItem.
type UpdateItem struct {
	AmountLeft *uint64 `json:"amount_left,omitempty" bson:"amount_left"`
	BuyLimit   *int64  `json:"buy_limit,omitempty" bson:"buy_limit"`
	CategoryId *UUID   `json:"category_id,omitempty" bson:"category_id"`

	// Name Name of the current item
	Name          *string `json:"name,omitempty" bson:"name"`
	OptimalAmount *uint64 `json:"optimal_amount,omitempty" bson:"optimal_amount"`

	// Picture Picture of the current item
	Picture         *string     `json:"picture,omitempty" bson:"picture"`
	Prices          *ItemPrices `json:"prices,omitempty" bson:"prices"`
	Promotion       *uint64     `json:"promotion,omitempty" bson:"promotion"`
	PromotionEndsAt *uint64     `json:"promotion_ends_at,omitempty" bson:"promotion_ends_at"`

	// State State of the item
	State *ItemState `json:"state,omitempty" bson:"state"`
}

// PatchAccountJSONBody defines parameters for PatchAccount.
type PatchAccountJSONBody struct {
	NewCardPin string `json:"new_card_pin" bson:"new_card_pin"`
	OldCardPin string `json:"old_card_pin" bson:"old_card_pin"`
}

// GetAccountQRJSONBody defines parameters for GetAccountQR.
type GetAccountQRJSONBody struct {
	CardPin string `json:"card_pin" bson:"card_pin"`
}

// GetSelfRefillsParams defines parameters for GetSelfRefills.
type GetSelfRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetCurrentAccountTransactionsParams defines parameters for GetCurrentAccountTransactions.
type GetCurrentAccountTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of accounts to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// GetAccountRefillsParams defines parameters for GetAccountRefills.
type GetAccountRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// PostRefillParams defines parameters for PostRefill.
type PostRefillParams struct {
	// Amount Amount of the refill
	Amount uint64 `form:"amount" json:"amount" bson:"amount"`
}

// PatchRefillIdParams defines parameters for PatchRefillId.
type PatchRefillIdParams struct {
	// State New state of the refill
	State RefillState `form:"state" json:"state" bson:"state"`
}

// GetAccountTransactionsParams defines parameters for GetAccountTransactions.
type GetAccountTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// PatchTransactionIdParams defines parameters for PatchTransactionId.
type PatchTransactionIdParams struct {
	// State New state of the transaction
	State TransactionState `form:"state" json:"state" bson:"state"`
}

// PatchTransactionItemIdParams defines parameters for PatchTransactionItemId.
type PatchTransactionItemIdParams struct {
	// State New state of the item
	State *TransactionItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// Amount New amount of the item
	Amount *uint64 `form:"amount,omitempty" json:"amount,omitempty" bson:"amount"`
}

// ConnectCardJSONBody defines parameters for ConnectCard.
type ConnectCardJSONBody struct {
	CardId  string `json:"card_id" bson:"card_id"`
	CardPin string `json:"card_pin" bson:"card_pin"`
}

// ConnectGoogleParams defines parameters for ConnectGoogle.
type ConnectGoogleParams struct {
	// R Redirect to this url after connecting
	R string `form:"r" json:"r" bson:"r"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// Code Google OAuth code
	Code string `form:"code" json:"code" bson:"code"`

	// State Google OAuth state
	State string `form:"state" json:"state" bson:"state"`
}

// GetCategoryItemsParams defines parameters for GetCategoryItems.
type GetCategoryItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of items per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *ItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetDeletedAccountsParams defines parameters for GetDeletedAccounts.
type GetDeletedAccountsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// GetDeletedCarouselImagesParams defines parameters for GetDeletedCarouselImages.
type GetDeletedCarouselImagesParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedCarouselTextsParams defines parameters for GetDeletedCarouselTexts.
type GetDeletedCarouselTextsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedCategoriesParams defines parameters for GetDeletedCategories.
type GetDeletedCategoriesParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of categories per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedItemsParams defines parameters for GetDeletedItems.
type GetDeletedItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedRefillsParams defines parameters for GetDeletedRefills.
type GetDeletedRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedTransactionsParams defines parameters for GetDeletedTransactions.
type GetDeletedTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// ImportAccountsMultipartBody defines parameters for ImportAccounts.
type ImportAccountsMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty" bson:"file"`
}

// GetAllItemsParams defines parameters for GetAllItems.
type GetAllItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of items per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *ItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// CategoryId Filter by category
	CategoryId *UUID `form:"category_id,omitempty" json:"category_id,omitempty" bson:"category_id"`

	// Name Filter by name
	Name *string `form:"name,omitempty" json:"name,omitempty" bson:"name"`
}

// GetRefillsParams defines parameters for GetRefills.
type GetRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// PatchAccountJSONRequestBody defines body for PatchAccount for application/json ContentType.
type PatchAccountJSONRequestBody PatchAccountJSONBody

// GetAccountQRJSONRequestBody defines body for GetAccountQR for application/json ContentType.
type GetAccountQRJSONRequestBody GetAccountQRJSONBody

// PostTransactionsJSONRequestBody defines body for PostTransactions for application/json ContentType.
type PostTransactionsJSONRequestBody = NewTransaction

// PostAccountsJSONRequestBody defines body for PostAccounts for application/json ContentType.
type PostAccountsJSONRequestBody = NewAccount

// PatchAccountIdJSONRequestBody defines body for PatchAccountId for application/json ContentType.
type PatchAccountIdJSONRequestBody = UpdateAccountAdmin

// ConnectCardJSONRequestBody defines body for ConnectCard for application/json ContentType.
type ConnectCardJSONRequestBody ConnectCardJSONBody

// AddCarouselImageMultipartRequestBody defines body for AddCarouselImage for multipart/form-data ContentType.
type AddCarouselImageMultipartRequestBody = CarouselImageUpload

// AddCarouselTextJSONRequestBody defines body for AddCarouselText for application/json ContentType.
type AddCarouselTextJSONRequestBody = CarouselTextCreate

// PostCategoryJSONRequestBody defines body for PostCategory for application/json ContentType.
type PostCategoryJSONRequestBody = NewCategory

// PatchCategoryJSONRequestBody defines body for PatchCategory for application/json ContentType.
type PatchCategoryJSONRequestBody = UpdateCategory

// PostItemJSONRequestBody defines body for PostItem for application/json ContentType.
type PostItemJSONRequestBody = NewItem

// PatchItemJSONRequestBody defines body for PatchItem for application/json ContentType.
type PatchItemJSONRequestBody = UpdateItem

// ImportAccountsMultipartRequestBody defines body for ImportAccounts for multipart/form-data ContentType.
type ImportAccountsMultipartRequestBody ImportAccountsMultipartBody

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /account)
	GetAccount(ctx echo.Context) error

	// (PATCH /account)
	PatchAccount(ctx echo.Context) error

	// (GET /account/admin)
	GetAccountAdmin(ctx echo.Context) error

	// (GET /account/qr)
	GetAccountQRWebsocket(ctx echo.Context) error

	// (POST /account/qr)
	GetAccountQR(ctx echo.Context) error

	// (GET /account/refills)
	GetSelfRefills(ctx echo.Context, params GetSelfRefillsParams) error

	// (GET /account/transactions)
	GetCurrentAccountTransactions(ctx echo.Context, params GetCurrentAccountTransactionsParams) error

	// (POST /account/transactions)
	PostTransactions(ctx echo.Context) error

	// (GET /accounts)
	GetAccounts(ctx echo.Context, params GetAccountsParams) error

	// (POST /accounts)
	PostAccounts(ctx echo.Context) error

	// (DELETE /accounts/{account_id})
	MarkDeleteAccountId(ctx echo.Context, accountId UUID) error

	// (GET /accounts/{account_id})
	GetAccountId(ctx echo.Context, accountId UUID) error

	// (PATCH /accounts/{account_id})
	PatchAccountId(ctx echo.Context, accountId UUID) error

	// (GET /accounts/{account_id}/refills)
	GetAccountRefills(ctx echo.Context, accountId string, params GetAccountRefillsParams) error

	// (POST /accounts/{account_id}/refills)
	PostRefill(ctx echo.Context, accountId string, params PostRefillParams) error

	// (DELETE /accounts/{account_id}/refills/{refill_id})
	MarkDeleteRefill(ctx echo.Context, accountId UUID, refillId UUID) error

	// (PATCH /accounts/{account_id}/refills/{refill_id})
	PatchRefillId(ctx echo.Context, accountId UUID, refillId UUID, params PatchRefillIdParams) error

	// (GET /accounts/{account_id}/transactions)
	GetAccountTransactions(ctx echo.Context, accountId UUID, params GetAccountTransactionsParams) error

	// (DELETE /accounts/{account_id}/transactions/{transaction_id})
	MarkDeleteTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error

	// (GET /accounts/{account_id}/transactions/{transaction_id})
	GetTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error

	// (PATCH /accounts/{account_id}/transactions/{transaction_id})
	PatchTransactionId(ctx echo.Context, accountId UUID, transactionId UUID, params PatchTransactionIdParams) error

	// (PATCH /accounts/{account_id}/transactions/{transaction_id}/{item_id})
	PatchTransactionItemId(ctx echo.Context, accountId UUID, transactionId UUID, itemId UUID, params PatchTransactionItemIdParams) error

	// (POST /auth/card)
	ConnectCard(ctx echo.Context) error

	// (GET /auth/google)
	ConnectGoogle(ctx echo.Context, params ConnectGoogleParams) error

	// (GET /auth/google/begin/{qr_nonce})
	ConnectAccount(ctx echo.Context, qrNonce string) error

	// (GET /auth/google/callback)
	Callback(ctx echo.Context, params CallbackParams) error

	// (GET /carousel/images)
	GetCarouselImages(ctx echo.Context) error

	// (POST /carousel/images)
	AddCarouselImage(ctx echo.Context) error

	// (DELETE /carousel/images/{image_id})
	MarkDeleteCarouselImage(ctx echo.Context, imageId UUID) error

	// (GET /carousel/images/{image_id})
	GetCarouselImage(ctx echo.Context, imageId UUID) error

	// (GET /carousel/texts)
	GetCarouselTexts(ctx echo.Context) error

	// (POST /carousel/texts)
	AddCarouselText(ctx echo.Context) error

	// (DELETE /carousel/texts/{text_id})
	MarkDeleteCarouselText(ctx echo.Context, textId UUID) error

	// (GET /categories)
	GetCategories(ctx echo.Context) error

	// (POST /categories)
	PostCategory(ctx echo.Context) error

	// (DELETE /categories/{category_id})
	MarkDeleteCategory(ctx echo.Context, categoryId UUID) error

	// (GET /categories/{category_id})
	GetCategory(ctx echo.Context, categoryId UUID) error

	// (PATCH /categories/{category_id})
	PatchCategory(ctx echo.Context, categoryId UUID) error

	// (GET /categories/{category_id}/items)
	GetCategoryItems(ctx echo.Context, categoryId UUID, params GetCategoryItemsParams) error

	// (POST /categories/{category_id}/items)
	PostItem(ctx echo.Context, categoryId UUID) error

	// (DELETE /categories/{category_id}/items/{item_id})
	MarkDeleteItem(ctx echo.Context, categoryId UUID, itemId UUID) error

	// (PATCH /categories/{category_id}/items/{item_id})
	PatchItem(ctx echo.Context, categoryId UUID, itemId UUID) error

	// (GET /categories/{category_id}/items/{item_id}/picture)
	GetItemPicture(ctx echo.Context, categoryId UUID, itemId UUID) error

	// (GET /categories/{category_id}/picture)
	GetCategoryPicture(ctx echo.Context, categoryId UUID) error

	// (GET /deleted/accounts)
	GetDeletedAccounts(ctx echo.Context, params GetDeletedAccountsParams) error

	// (DELETE /deleted/accounts/{account_id})
	DeleteAccount(ctx echo.Context, accountId UUID) error

	// (PATCH /deleted/accounts/{account_id})
	RestoreDeletedAccount(ctx echo.Context, accountId UUID) error

	// (GET /deleted/carousel/images)
	GetDeletedCarouselImages(ctx echo.Context, params GetDeletedCarouselImagesParams) error

	// (DELETE /deleted/carousel/images/{image_id})
	DeleteCarouselImage(ctx echo.Context, imageId UUID) error

	// (PATCH /deleted/carousel/images/{image_id})
	RestoreDeletedCarouselImage(ctx echo.Context, imageId UUID) error

	// (GET /deleted/carousel/texts)
	GetDeletedCarouselTexts(ctx echo.Context, params GetDeletedCarouselTextsParams) error

	// (DELETE /deleted/carousel/texts/{text_id})
	DeleteCarouselText(ctx echo.Context, textId UUID) error

	// (PATCH /deleted/carousel/texts/{text_id})
	RestoreDeletedCarouselText(ctx echo.Context, textId UUID) error

	// (GET /deleted/categories)
	GetDeletedCategories(ctx echo.Context, params GetDeletedCategoriesParams) error

	// (DELETE /deleted/categories/{category_id})
	DeleteCategory(ctx echo.Context, categoryId UUID) error

	// (PATCH /deleted/categories/{category_id})
	RestoreDeletedCategory(ctx echo.Context, categoryId UUID) error

	// (GET /deleted/items)
	GetDeletedItems(ctx echo.Context, params GetDeletedItemsParams) error

	// (DELETE /deleted/items/{item_id})
	DeleteItem(ctx echo.Context, itemId UUID) error

	// (PATCH /deleted/items/{item_id})
	RestoreDeletedItem(ctx echo.Context, itemId UUID) error

	// (GET /deleted/refills)
	GetDeletedRefills(ctx echo.Context, params GetDeletedRefillsParams) error

	// (DELETE /deleted/refills/{refill_id})
	DeleteRefill(ctx echo.Context, refillId UUID) error

	// (PATCH /deleted/refills/{refill_id})
	RestoreDeletedRefill(ctx echo.Context, refillId UUID) error

	// (GET /deleted/transactions)
	GetDeletedTransactions(ctx echo.Context, params GetDeletedTransactionsParams) error

	// (DELETE /deleted/transactions/{transaction_id})
	DeleteTransaction(ctx echo.Context, transactionId UUID) error

	// (PATCH /deleted/transactions/{transaction_id})
	RestoreDeletedTransaction(ctx echo.Context, transactionId UUID) error

	// (POST /import/accounts)
	ImportAccounts(ctx echo.Context) error

	// (GET /items)
	GetAllItems(ctx echo.Context, params GetAllItemsParams) error

	// (GET /logout)
	Logout(ctx echo.Context) error

	// (GET /refills)
	GetRefills(ctx echo.Context, params GetRefillsParams) error

	// (GET /transactions)
	GetTransactions(ctx echo.Context, params GetTransactionsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface `bson:"handler"`
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccount(ctx)
	return err
}

// PatchAccount converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAccount(ctx)
	return err
}

// GetAccountAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountAdmin(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountAdmin(ctx)
	return err
}

// GetAccountQRWebsocket converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountQRWebsocket(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountQRWebsocket(ctx)
	return err
}

// GetAccountQR converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountQR(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	ctx.Set(Not_onboardedScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountQR(ctx)
	return err
}

// GetSelfRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfRefills(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSelfRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSelfRefills(ctx, params)
	return err
}

// GetCurrentAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentAccountTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCurrentAccountTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentAccountTransactions(ctx, params)
	return err
}

// PostTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) PostTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTransactions(ctx)
	return err
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccounts(ctx, params)
	return err
}

// PostAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAccounts(ctx)
	return err
}

// MarkDeleteAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteAccountId(ctx, accountId)
	return err
}

// GetAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountId(ctx, accountId)
	return err
}

// PatchAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchAccountId(ctx, accountId)
	return err
}

// GetAccountRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountRefills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountRefills(ctx, accountId, params)
	return err
}

// PostRefill converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRefillParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostRefill(ctx, accountId, params)
	return err
}

// MarkDeleteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "refill_id", runtime.ParamLocationPath, ctx.Param("refill_id"), &refillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteRefill(ctx, accountId, refillId)
	return err
}

// PatchRefillId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRefillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "refill_id", runtime.ParamLocationPath, ctx.Param("refill_id"), &refillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchRefillIdParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchRefillId(ctx, accountId, refillId, params)
	return err
}

// GetAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAccountTransactions(ctx, accountId, params)
	return err
}

// MarkDeleteTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteTransactionId(ctx, accountId, transactionId)
	return err
}

// GetTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactionId(ctx, accountId, transactionId)
	return err
}

// PatchTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTransactionIdParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTransactionId(ctx, accountId, transactionId, params)
	return err
}

// PatchTransactionItemId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTransactionItemId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTransactionItemIdParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchTransactionItemId(ctx, accountId, transactionId, itemId, params)
	return err
}

// ConnectCard converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectCard(ctx echo.Context) error {
	var err error

	ctx.Set(Local_tokenScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectCard(ctx)
	return err
}

// ConnectGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectGoogle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConnectGoogleParams
	// ------------- Required query parameter "r" -------------

	err = runtime.BindQueryParameter("form", true, true, "r", ctx.QueryParams(), &params.R)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter r: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectGoogle(ctx, params)
	return err
}

// ConnectAccount converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "qr_nonce" -------------
	var qrNonce string

	err = runtime.BindStyledParameterWithLocation("simple", false, "qr_nonce", runtime.ParamLocationPath, ctx.Param("qr_nonce"), &qrNonce)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter qr_nonce: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConnectAccount(ctx, qrNonce)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// GetCarouselImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselImages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarouselImages(ctx)
	return err
}

// AddCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) AddCarouselImage(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCarouselImage(ctx)
	return err
}

// MarkDeleteCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "image_id", runtime.ParamLocationPath, ctx.Param("image_id"), &imageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteCarouselImage(ctx, imageId)
	return err
}

// GetCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "image_id", runtime.ParamLocationPath, ctx.Param("image_id"), &imageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarouselImage(ctx, imageId)
	return err
}

// GetCarouselTexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselTexts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCarouselTexts(ctx)
	return err
}

// AddCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) AddCarouselText(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.AddCarouselText(ctx)
	return err
}

// MarkDeleteCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "text_id", runtime.ParamLocationPath, ctx.Param("text_id"), &textId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteCarouselText(ctx, textId)
	return err
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategories(ctx)
	return err
}

// PostCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PostCategory(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostCategory(ctx)
	return err
}

// MarkDeleteCategory converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteCategory(ctx, categoryId)
	return err
}

// GetCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategory(ctx, categoryId)
	return err
}

// PatchCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchCategory(ctx, categoryId)
	return err
}

// GetCategoryItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoryItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoryItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategoryItems(ctx, categoryId, params)
	return err
}

// PostItem converts echo context to params.
func (w *ServerInterfaceWrapper) PostItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostItem(ctx, categoryId)
	return err
}

// MarkDeleteItem converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MarkDeleteItem(ctx, categoryId, itemId)
	return err
}

// PatchItem converts echo context to params.
func (w *ServerInterfaceWrapper) PatchItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchItem(ctx, categoryId, itemId)
	return err
}

// GetItemPicture converts echo context to params.
func (w *ServerInterfaceWrapper) GetItemPicture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetItemPicture(ctx, categoryId, itemId)
	return err
}

// GetCategoryPicture converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoryPicture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCategoryPicture(ctx, categoryId)
	return err
}

// GetDeletedAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedAccountsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedAccounts(ctx, params)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAccount(ctx, accountId)
	return err
}

// RestoreDeletedAccount converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "account_id", runtime.ParamLocationPath, ctx.Param("account_id"), &accountId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedAccount(ctx, accountId)
	return err
}

// GetDeletedCarouselImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedCarouselImages(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedCarouselImagesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedCarouselImages(ctx, params)
	return err
}

// DeleteCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "image_id", runtime.ParamLocationPath, ctx.Param("image_id"), &imageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCarouselImage(ctx, imageId)
	return err
}

// RestoreDeletedCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "image_id", runtime.ParamLocationPath, ctx.Param("image_id"), &imageId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedCarouselImage(ctx, imageId)
	return err
}

// GetDeletedCarouselTexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedCarouselTexts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedCarouselTextsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedCarouselTexts(ctx, params)
	return err
}

// DeleteCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "text_id", runtime.ParamLocationPath, ctx.Param("text_id"), &textId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCarouselText(ctx, textId)
	return err
}

// RestoreDeletedCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "text_id", runtime.ParamLocationPath, ctx.Param("text_id"), &textId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedCarouselText(ctx, textId)
	return err
}

// GetDeletedCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedCategories(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedCategoriesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedCategories(ctx, params)
	return err
}

// DeleteCategory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCategory(ctx, categoryId)
	return err
}

// RestoreDeletedCategory converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "category_id", runtime.ParamLocationPath, ctx.Param("category_id"), &categoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedCategory(ctx, categoryId)
	return err
}

// GetDeletedItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedItems(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedItems(ctx, params)
	return err
}

// DeleteItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteItem(ctx, itemId)
	return err
}

// RestoreDeletedItem converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "item_id", runtime.ParamLocationPath, ctx.Param("item_id"), &itemId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedItem(ctx, itemId)
	return err
}

// GetDeletedRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedRefills(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedRefills(ctx, params)
	return err
}

// DeleteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "refill_id", runtime.ParamLocationPath, ctx.Param("refill_id"), &refillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRefill(ctx, refillId)
	return err
}

// RestoreDeletedRefill converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "refill_id", runtime.ParamLocationPath, ctx.Param("refill_id"), &refillId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedRefill(ctx, refillId)
	return err
}

// GetDeletedTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDeletedTransactions(ctx, params)
	return err
}

// DeleteTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTransaction(ctx, transactionId)
	return err
}

// RestoreDeletedTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "transaction_id", runtime.ParamLocationPath, ctx.Param("transaction_id"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.RestoreDeletedTransaction(ctx, transactionId)
	return err
}

// ImportAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) ImportAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportAccounts(ctx)
	return err
}

// GetAllItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllItems(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllItems(ctx, params)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	ctx.Set(Not_onboardedScopes, []string{})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetRefills(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetRefills(ctx, params)
	return err
}

// GetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransactions(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/account", wrapper.GetAccount)
	router.PATCH(baseURL+"/account", wrapper.PatchAccount)
	router.GET(baseURL+"/account/admin", wrapper.GetAccountAdmin)
	router.GET(baseURL+"/account/qr", wrapper.GetAccountQRWebsocket)
	router.POST(baseURL+"/account/qr", wrapper.GetAccountQR)
	router.GET(baseURL+"/account/refills", wrapper.GetSelfRefills)
	router.GET(baseURL+"/account/transactions", wrapper.GetCurrentAccountTransactions)
	router.POST(baseURL+"/account/transactions", wrapper.PostTransactions)
	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.PostAccounts)
	router.DELETE(baseURL+"/accounts/:account_id", wrapper.MarkDeleteAccountId)
	router.GET(baseURL+"/accounts/:account_id", wrapper.GetAccountId)
	router.PATCH(baseURL+"/accounts/:account_id", wrapper.PatchAccountId)
	router.GET(baseURL+"/accounts/:account_id/refills", wrapper.GetAccountRefills)
	router.POST(baseURL+"/accounts/:account_id/refills", wrapper.PostRefill)
	router.DELETE(baseURL+"/accounts/:account_id/refills/:refill_id", wrapper.MarkDeleteRefill)
	router.PATCH(baseURL+"/accounts/:account_id/refills/:refill_id", wrapper.PatchRefillId)
	router.GET(baseURL+"/accounts/:account_id/transactions", wrapper.GetAccountTransactions)
	router.DELETE(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.MarkDeleteTransactionId)
	router.GET(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.GetTransactionId)
	router.PATCH(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.PatchTransactionId)
	router.PATCH(baseURL+"/accounts/:account_id/transactions/:transaction_id/:item_id", wrapper.PatchTransactionItemId)
	router.POST(baseURL+"/auth/card", wrapper.ConnectCard)
	router.GET(baseURL+"/auth/google", wrapper.ConnectGoogle)
	router.GET(baseURL+"/auth/google/begin/:qr_nonce", wrapper.ConnectAccount)
	router.GET(baseURL+"/auth/google/callback", wrapper.Callback)
	router.GET(baseURL+"/carousel/images", wrapper.GetCarouselImages)
	router.POST(baseURL+"/carousel/images", wrapper.AddCarouselImage)
	router.DELETE(baseURL+"/carousel/images/:image_id", wrapper.MarkDeleteCarouselImage)
	router.GET(baseURL+"/carousel/images/:image_id", wrapper.GetCarouselImage)
	router.GET(baseURL+"/carousel/texts", wrapper.GetCarouselTexts)
	router.POST(baseURL+"/carousel/texts", wrapper.AddCarouselText)
	router.DELETE(baseURL+"/carousel/texts/:text_id", wrapper.MarkDeleteCarouselText)
	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.POST(baseURL+"/categories", wrapper.PostCategory)
	router.DELETE(baseURL+"/categories/:category_id", wrapper.MarkDeleteCategory)
	router.GET(baseURL+"/categories/:category_id", wrapper.GetCategory)
	router.PATCH(baseURL+"/categories/:category_id", wrapper.PatchCategory)
	router.GET(baseURL+"/categories/:category_id/items", wrapper.GetCategoryItems)
	router.POST(baseURL+"/categories/:category_id/items", wrapper.PostItem)
	router.DELETE(baseURL+"/categories/:category_id/items/:item_id", wrapper.MarkDeleteItem)
	router.PATCH(baseURL+"/categories/:category_id/items/:item_id", wrapper.PatchItem)
	router.GET(baseURL+"/categories/:category_id/items/:item_id/picture", wrapper.GetItemPicture)
	router.GET(baseURL+"/categories/:category_id/picture", wrapper.GetCategoryPicture)
	router.GET(baseURL+"/deleted/accounts", wrapper.GetDeletedAccounts)
	router.DELETE(baseURL+"/deleted/accounts/:account_id", wrapper.DeleteAccount)
	router.PATCH(baseURL+"/deleted/accounts/:account_id", wrapper.RestoreDeletedAccount)
	router.GET(baseURL+"/deleted/carousel/images", wrapper.GetDeletedCarouselImages)
	router.DELETE(baseURL+"/deleted/carousel/images/:image_id", wrapper.DeleteCarouselImage)
	router.PATCH(baseURL+"/deleted/carousel/images/:image_id", wrapper.RestoreDeletedCarouselImage)
	router.GET(baseURL+"/deleted/carousel/texts", wrapper.GetDeletedCarouselTexts)
	router.DELETE(baseURL+"/deleted/carousel/texts/:text_id", wrapper.DeleteCarouselText)
	router.PATCH(baseURL+"/deleted/carousel/texts/:text_id", wrapper.RestoreDeletedCarouselText)
	router.GET(baseURL+"/deleted/categories", wrapper.GetDeletedCategories)
	router.DELETE(baseURL+"/deleted/categories/:category_id", wrapper.DeleteCategory)
	router.PATCH(baseURL+"/deleted/categories/:category_id", wrapper.RestoreDeletedCategory)
	router.GET(baseURL+"/deleted/items", wrapper.GetDeletedItems)
	router.DELETE(baseURL+"/deleted/items/:item_id", wrapper.DeleteItem)
	router.PATCH(baseURL+"/deleted/items/:item_id", wrapper.RestoreDeletedItem)
	router.GET(baseURL+"/deleted/refills", wrapper.GetDeletedRefills)
	router.DELETE(baseURL+"/deleted/refills/:refill_id", wrapper.DeleteRefill)
	router.PATCH(baseURL+"/deleted/refills/:refill_id", wrapper.RestoreDeletedRefill)
	router.GET(baseURL+"/deleted/transactions", wrapper.GetDeletedTransactions)
	router.DELETE(baseURL+"/deleted/transactions/:transaction_id", wrapper.DeleteTransaction)
	router.PATCH(baseURL+"/deleted/transactions/:transaction_id", wrapper.RestoreDeletedTransaction)
	router.POST(baseURL+"/import/accounts", wrapper.ImportAccounts)
	router.GET(baseURL+"/items", wrapper.GetAllItems)
	router.GET(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/refills", wrapper.GetRefills)
	router.GET(baseURL+"/transactions", wrapper.GetTransactions)

}

type GetAccountRequestObject struct {
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount401JSONResponse HTTPError

func (response GetAccount401JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount500JSONResponse HTTPError

func (response GetAccount500JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountRequestObject struct {
	Body *PatchAccountJSONRequestBody `bson:"body"`
}

type PatchAccountResponseObject interface {
	VisitPatchAccountResponse(w http.ResponseWriter) error
}

type PatchAccount200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response PatchAccount200JSONResponse) VisitPatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccount400JSONResponse HTTPError

func (response PatchAccount400JSONResponse) VisitPatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccount401JSONResponse HTTPError

func (response PatchAccount401JSONResponse) VisitPatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccount404JSONResponse HTTPError

func (response PatchAccount404JSONResponse) VisitPatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccount409JSONResponse HTTPError

func (response PatchAccount409JSONResponse) VisitPatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccount500JSONResponse HTTPError

func (response PatchAccount500JSONResponse) VisitPatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdminRequestObject struct {
}

type GetAccountAdminResponseObject interface {
	VisitGetAccountAdminResponse(w http.ResponseWriter) error
}

type GetAccountAdmin200JSONResponse struct {
	CanRestore bool      `json:"can_restore" bson:"can_restore"`
	IsAllowed  bool      `json:"is_allowed" bson:"is_allowed"`
	Message    *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetAccountAdmin200JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin401JSONResponse HTTPError

func (response GetAccountAdmin401JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin404JSONResponse HTTPError

func (response GetAccountAdmin404JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin409JSONResponse HTTPError

func (response GetAccountAdmin409JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin500JSONResponse HTTPError

func (response GetAccountAdmin500JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountQRWebsocketRequestObject struct {
}

type GetAccountQRWebsocketResponseObject interface {
	VisitGetAccountQRWebsocketResponse(w http.ResponseWriter) error
}

type GetAccountQRWebsocket101ResponseHeaders struct {
	Connection         string `bson:"connection"`
	SecWebSocketAccept string `bson:"sec_web_socket_accept"`
	Upgrade            string `bson:"upgrade"`
}

type GetAccountQRWebsocket101Response struct {
	Headers GetAccountQRWebsocket101ResponseHeaders `bson:"headers"`
}

func (response GetAccountQRWebsocket101Response) VisitGetAccountQRWebsocketResponse(w http.ResponseWriter) error {
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.Header().Set("Sec-WebSocket-Accept", fmt.Sprint(response.Headers.SecWebSocketAccept))
	w.Header().Set("Upgrade", fmt.Sprint(response.Headers.Upgrade))
	w.WriteHeader(101)
	return nil
}

type GetAccountQRRequestObject struct {
	Body *GetAccountQRJSONRequestBody `bson:"body"`
}

type GetAccountQRResponseObject interface {
	VisitGetAccountQRResponse(w http.ResponseWriter) error
}

type GetAccountQR200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetAccountQR200ImagepngResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetAccountQR401JSONResponse HTTPError

func (response GetAccountQR401JSONResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountQR500JSONResponse HTTPError

func (response GetAccountQR500JSONResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefillsRequestObject struct {
	Params GetSelfRefillsParams `bson:"params"`
}

type GetSelfRefillsResponseObject interface {
	VisitGetSelfRefillsResponse(w http.ResponseWriter) error
}

type GetSelfRefills200JSONResponse struct {
	Limit   uint64    `json:"limit" bson:"limit"`
	MaxPage uint64    `json:"max_page" bson:"max_page"`
	Page    uint64    `json:"page" bson:"page"`
	Refills *[]Refill `json:"refills,omitempty" bson:"refills"`
}

func (response GetSelfRefills200JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefills401JSONResponse HTTPError

func (response GetSelfRefills401JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefills500JSONResponse HTTPError

func (response GetSelfRefills500JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactionsRequestObject struct {
	Params GetCurrentAccountTransactionsParams `bson:"params"`
}

type GetCurrentAccountTransactionsResponseObject interface {
	VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error
}

type GetCurrentAccountTransactions200JSONResponse struct {
	Limit        *uint64        `json:"limit,omitempty" bson:"limit"`
	MaxPage      *uint64        `json:"max_page,omitempty" bson:"max_page"`
	Page         *uint64        `json:"page,omitempty" bson:"page"`
	Transactions *[]Transaction `json:"transactions,omitempty" bson:"transactions"`
}

func (response GetCurrentAccountTransactions200JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactions401JSONResponse HTTPError

func (response GetCurrentAccountTransactions401JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactions403JSONResponse HTTPError

func (response GetCurrentAccountTransactions403JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactionsRequestObject struct {
	Body *PostTransactionsJSONRequestBody `bson:"body"`
}

type PostTransactionsResponseObject interface {
	VisitPostTransactionsResponse(w http.ResponseWriter) error
}

type PostTransactions201JSONResponse Transaction

func (response PostTransactions201JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions401JSONResponse HTTPError

func (response PostTransactions401JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions403JSONResponse HTTPError

func (response PostTransactions403JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions404JSONResponse HTTPError

func (response PostTransactions404JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions500JSONResponse HTTPError

func (response PostTransactions500JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountsRequestObject struct {
	Params GetAccountsParams `bson:"params"`
}

type GetAccountsResponseObject interface {
	VisitGetAccountsResponse(w http.ResponseWriter) error
}

type GetAccounts200JSONResponse struct {
	Accounts []Account `json:"accounts" bson:"accounts"`
	Limit    uint64    `json:"limit" bson:"limit"`
	MaxPage  uint64    `json:"max_page" bson:"max_page"`
	Message  *Messages `json:"message,omitempty" bson:"message"`
	Page     uint64    `json:"page" bson:"page"`
}

func (response GetAccounts200JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts401JSONResponse HTTPError

func (response GetAccounts401JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts403JSONResponse HTTPError

func (response GetAccounts403JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts500JSONResponse HTTPError

func (response GetAccounts500JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAccountsRequestObject struct {
	Body *PostAccountsJSONRequestBody `bson:"body"`
}

type PostAccountsResponseObject interface {
	VisitPostAccountsResponse(w http.ResponseWriter) error
}

type PostAccounts200JSONResponse Account

func (response PostAccounts200JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts401JSONResponse HTTPError

func (response PostAccounts401JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts403JSONResponse HTTPError

func (response PostAccounts403JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts409JSONResponse HTTPError

func (response PostAccounts409JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts500JSONResponse HTTPError

func (response PostAccounts500JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountIdRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type MarkDeleteAccountIdResponseObject interface {
	VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error
}

type MarkDeleteAccountId204Response struct {
}

func (response MarkDeleteAccountId204Response) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteAccountId401JSONResponse HTTPError

func (response MarkDeleteAccountId401JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountId403JSONResponse HTTPError

func (response MarkDeleteAccountId403JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountId404JSONResponse HTTPError

func (response MarkDeleteAccountId404JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountId500JSONResponse HTTPError

func (response MarkDeleteAccountId500JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountIdRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type GetAccountIdResponseObject interface {
	VisitGetAccountIdResponse(w http.ResponseWriter) error
}

type GetAccountId200JSONResponse Account

func (response GetAccountId200JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId401JSONResponse HTTPError

func (response GetAccountId401JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId403JSONResponse HTTPError

func (response GetAccountId403JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId404JSONResponse HTTPError

func (response GetAccountId404JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId500JSONResponse HTTPError

func (response GetAccountId500JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountIdRequestObject struct {
	AccountId UUID                           `json:"account_id" bson:"account_id"`
	Body      *PatchAccountIdJSONRequestBody `bson:"body"`
}

type PatchAccountIdResponseObject interface {
	VisitPatchAccountIdResponse(w http.ResponseWriter) error
}

type PatchAccountId200JSONResponse Account

func (response PatchAccountId200JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId401JSONResponse HTTPError

func (response PatchAccountId401JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId403JSONResponse HTTPError

func (response PatchAccountId403JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId404JSONResponse HTTPError

func (response PatchAccountId404JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId500JSONResponse HTTPError

func (response PatchAccountId500JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefillsRequestObject struct {
	AccountId string                  `json:"account_id" bson:"account_id"`
	Params    GetAccountRefillsParams `bson:"params"`
}

type GetAccountRefillsResponseObject interface {
	VisitGetAccountRefillsResponse(w http.ResponseWriter) error
}

type GetAccountRefills200JSONResponse struct {
	Limit   uint64    `json:"limit" bson:"limit"`
	MaxPage uint64    `json:"max_page" bson:"max_page"`
	Page    uint64    `json:"page" bson:"page"`
	Refills *[]Refill `json:"refills,omitempty" bson:"refills"`
}

func (response GetAccountRefills200JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills401JSONResponse HTTPError

func (response GetAccountRefills401JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills403JSONResponse HTTPError

func (response GetAccountRefills403JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills404JSONResponse HTTPError

func (response GetAccountRefills404JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills500JSONResponse HTTPError

func (response GetAccountRefills500JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRefillRequestObject struct {
	AccountId string           `json:"account_id" bson:"account_id"`
	Params    PostRefillParams `bson:"params"`
}

type PostRefillResponseObject interface {
	VisitPostRefillResponse(w http.ResponseWriter) error
}

type PostRefill201JSONResponse Refill

func (response PostRefill201JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill400JSONResponse HTTPError

func (response PostRefill400JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill401JSONResponse HTTPError

func (response PostRefill401JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill403JSONResponse HTTPError

func (response PostRefill403JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill404JSONResponse HTTPError

func (response PostRefill404JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill500JSONResponse HTTPError

func (response PostRefill500JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefillRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
	RefillId  UUID `json:"refill_id" bson:"refill_id"`
}

type MarkDeleteRefillResponseObject interface {
	VisitMarkDeleteRefillResponse(w http.ResponseWriter) error
}

type MarkDeleteRefill204Response struct {
}

func (response MarkDeleteRefill204Response) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteRefill401JSONResponse HTTPError

func (response MarkDeleteRefill401JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefill403JSONResponse HTTPError

func (response MarkDeleteRefill403JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefill404JSONResponse HTTPError

func (response MarkDeleteRefill404JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefill500JSONResponse HTTPError

func (response MarkDeleteRefill500JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillIdRequestObject struct {
	AccountId UUID                `json:"account_id" bson:"account_id"`
	RefillId  UUID                `json:"refill_id" bson:"refill_id"`
	Params    PatchRefillIdParams `bson:"params"`
}

type PatchRefillIdResponseObject interface {
	VisitPatchRefillIdResponse(w http.ResponseWriter) error
}

type PatchRefillId200JSONResponse Refill

func (response PatchRefillId200JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId400JSONResponse HTTPError

func (response PatchRefillId400JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId401JSONResponse HTTPError

func (response PatchRefillId401JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId403JSONResponse HTTPError

func (response PatchRefillId403JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId404JSONResponse HTTPError

func (response PatchRefillId404JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId409JSONResponse HTTPError

func (response PatchRefillId409JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId500JSONResponse HTTPError

func (response PatchRefillId500JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactionsRequestObject struct {
	AccountId UUID                         `json:"account_id" bson:"account_id"`
	Params    GetAccountTransactionsParams `bson:"params"`
}

type GetAccountTransactionsResponseObject interface {
	VisitGetAccountTransactionsResponse(w http.ResponseWriter) error
}

type GetAccountTransactions200JSONResponse struct {
	Limit        *uint64        `json:"limit,omitempty" bson:"limit"`
	MaxPage      *uint64        `json:"max_page,omitempty" bson:"max_page"`
	Page         *uint64        `json:"page,omitempty" bson:"page"`
	Transactions *[]Transaction `json:"transactions,omitempty" bson:"transactions"`
}

func (response GetAccountTransactions200JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions401JSONResponse HTTPError

func (response GetAccountTransactions401JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions403JSONResponse HTTPError

func (response GetAccountTransactions403JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions500JSONResponse HTTPError

func (response GetAccountTransactions500JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionIdRequestObject struct {
	AccountId     UUID `json:"account_id" bson:"account_id"`
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type MarkDeleteTransactionIdResponseObject interface {
	VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error
}

type MarkDeleteTransactionId200JSONResponse HTTPError

func (response MarkDeleteTransactionId200JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId401JSONResponse HTTPError

func (response MarkDeleteTransactionId401JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId403JSONResponse HTTPError

func (response MarkDeleteTransactionId403JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId404JSONResponse HTTPError

func (response MarkDeleteTransactionId404JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId500JSONResponse HTTPError

func (response MarkDeleteTransactionId500JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionIdRequestObject struct {
	AccountId     UUID `json:"account_id" bson:"account_id"`
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type GetTransactionIdResponseObject interface {
	VisitGetTransactionIdResponse(w http.ResponseWriter) error
}

type GetTransactionId200JSONResponse Transaction

func (response GetTransactionId200JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId401JSONResponse HTTPError

func (response GetTransactionId401JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId403JSONResponse HTTPError

func (response GetTransactionId403JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId404JSONResponse HTTPError

func (response GetTransactionId404JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId500JSONResponse HTTPError

func (response GetTransactionId500JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionIdRequestObject struct {
	AccountId     UUID                     `json:"account_id" bson:"account_id"`
	TransactionId UUID                     `json:"transaction_id" bson:"transaction_id"`
	Params        PatchTransactionIdParams `bson:"params"`
}

type PatchTransactionIdResponseObject interface {
	VisitPatchTransactionIdResponse(w http.ResponseWriter) error
}

type PatchTransactionId200JSONResponse HTTPError

func (response PatchTransactionId200JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId401JSONResponse HTTPError

func (response PatchTransactionId401JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId403JSONResponse HTTPError

func (response PatchTransactionId403JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId404JSONResponse HTTPError

func (response PatchTransactionId404JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId500JSONResponse HTTPError

func (response PatchTransactionId500JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemIdRequestObject struct {
	AccountId     UUID                         `json:"account_id" bson:"account_id"`
	TransactionId UUID                         `json:"transaction_id" bson:"transaction_id"`
	ItemId        UUID                         `json:"item_id" bson:"item_id"`
	Params        PatchTransactionItemIdParams `bson:"params"`
}

type PatchTransactionItemIdResponseObject interface {
	VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error
}

type PatchTransactionItemId200JSONResponse HTTPError

func (response PatchTransactionItemId200JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId401JSONResponse HTTPError

func (response PatchTransactionItemId401JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId403JSONResponse HTTPError

func (response PatchTransactionItemId403JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId404JSONResponse HTTPError

func (response PatchTransactionItemId404JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId500JSONResponse HTTPError

func (response PatchTransactionItemId500JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCardRequestObject struct {
	Body *ConnectCardJSONRequestBody `bson:"body"`
}

type ConnectCardResponseObject interface {
	VisitConnectCardResponse(w http.ResponseWriter) error
}

type ConnectCard200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response ConnectCard200JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCard400JSONResponse HTTPError

func (response ConnectCard400JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCard401JSONResponse HTTPError

func (response ConnectCard401JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCard500JSONResponse HTTPError

func (response ConnectCard500JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectGoogleRequestObject struct {
	Params ConnectGoogleParams `bson:"params"`
}

type ConnectGoogleResponseObject interface {
	VisitConnectGoogleResponse(w http.ResponseWriter) error
}

type ConnectGoogle301ResponseHeaders struct {
	Location string `bson:"location"`
}

type ConnectGoogle301Response struct {
	Headers ConnectGoogle301ResponseHeaders `bson:"headers"`
}

func (response ConnectGoogle301Response) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type ConnectGoogle400JSONResponse HTTPError

func (response ConnectGoogle400JSONResponse) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectGoogle401JSONResponse HTTPError

func (response ConnectGoogle401JSONResponse) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectGoogle500JSONResponse HTTPError

func (response ConnectGoogle500JSONResponse) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectAccountRequestObject struct {
	QrNonce string `json:"qr_nonce" bson:"qr_nonce"`
}

type ConnectAccountResponseObject interface {
	VisitConnectAccountResponse(w http.ResponseWriter) error
}

type ConnectAccount301ResponseHeaders struct {
	Location string `bson:"location"`
}

type ConnectAccount301Response struct {
	Headers ConnectAccount301ResponseHeaders `bson:"headers"`
}

func (response ConnectAccount301Response) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type ConnectAccount400JSONResponse HTTPError

func (response ConnectAccount400JSONResponse) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectAccount500JSONResponse HTTPError

func (response ConnectAccount500JSONResponse) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CallbackRequestObject struct {
	Params CallbackParams `bson:"params"`
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback301ResponseHeaders struct {
	Location string `bson:"location"`
}

type Callback301Response struct {
	Headers Callback301ResponseHeaders `bson:"headers"`
}

func (response Callback301Response) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type Callback500JSONResponse HTTPError

func (response Callback500JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImagesRequestObject struct {
}

type GetCarouselImagesResponseObject interface {
	VisitGetCarouselImagesResponse(w http.ResponseWriter) error
}

type GetCarouselImages200JSONResponse []CarouselImage

func (response GetCarouselImages200JSONResponse) VisitGetCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImages500JSONResponse HTTPError

func (response GetCarouselImages500JSONResponse) VisitGetCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImageRequestObject struct {
	Body *multipart.Reader `bson:"body"`
}

type AddCarouselImageResponseObject interface {
	VisitAddCarouselImageResponse(w http.ResponseWriter) error
}

type AddCarouselImage201JSONResponse CarouselImage

func (response AddCarouselImage201JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage400JSONResponse HTTPError

func (response AddCarouselImage400JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage401JSONResponse HTTPError

func (response AddCarouselImage401JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage403JSONResponse HTTPError

func (response AddCarouselImage403JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage409JSONResponse HTTPError

func (response AddCarouselImage409JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage500JSONResponse HTTPError

func (response AddCarouselImage500JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type MarkDeleteCarouselImageResponseObject interface {
	VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error
}

type MarkDeleteCarouselImage204Response struct {
}

func (response MarkDeleteCarouselImage204Response) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteCarouselImage401JSONResponse HTTPError

func (response MarkDeleteCarouselImage401JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImage403JSONResponse HTTPError

func (response MarkDeleteCarouselImage403JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImage404JSONResponse HTTPError

func (response MarkDeleteCarouselImage404JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImage500JSONResponse HTTPError

func (response MarkDeleteCarouselImage500JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type GetCarouselImageResponseObject interface {
	VisitGetCarouselImageResponse(w http.ResponseWriter) error
}

type GetCarouselImage200ImageResponse struct {
	Body          io.Reader `bson:"body"`
	ContentType   string    `bson:"content_type"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetCarouselImage200ImageResponse) VisitGetCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetCarouselImage404JSONResponse HTTPError

func (response GetCarouselImage404JSONResponse) VisitGetCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImage500JSONResponse HTTPError

func (response GetCarouselImage500JSONResponse) VisitGetCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselTextsRequestObject struct {
}

type GetCarouselTextsResponseObject interface {
	VisitGetCarouselTextsResponse(w http.ResponseWriter) error
}

type GetCarouselTexts200JSONResponse []CarouselText

func (response GetCarouselTexts200JSONResponse) VisitGetCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselTexts500JSONResponse HTTPError

func (response GetCarouselTexts500JSONResponse) VisitGetCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselTextRequestObject struct {
	Body *AddCarouselTextJSONRequestBody `bson:"body"`
}

type AddCarouselTextResponseObject interface {
	VisitAddCarouselTextResponse(w http.ResponseWriter) error
}

type AddCarouselText201JSONResponse CarouselText

func (response AddCarouselText201JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText400JSONResponse HTTPError

func (response AddCarouselText400JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText401JSONResponse HTTPError

func (response AddCarouselText401JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText403JSONResponse HTTPError

func (response AddCarouselText403JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText409JSONResponse HTTPError

func (response AddCarouselText409JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText500JSONResponse HTTPError

func (response AddCarouselText500JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselTextRequestObject struct {
	TextId UUID `json:"text_id" bson:"text_id"`
}

type MarkDeleteCarouselTextResponseObject interface {
	VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error
}

type MarkDeleteCarouselText204Response struct {
}

func (response MarkDeleteCarouselText204Response) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteCarouselText401JSONResponse HTTPError

func (response MarkDeleteCarouselText401JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselText403JSONResponse HTTPError

func (response MarkDeleteCarouselText403JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselText404JSONResponse HTTPError

func (response MarkDeleteCarouselText404JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselText500JSONResponse HTTPError

func (response MarkDeleteCarouselText500JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoriesRequestObject struct {
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter) error
}

type GetCategories200JSONResponse []Category

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategories500JSONResponse HTTPError

func (response GetCategories500JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCategoryRequestObject struct {
	Body *PostCategoryJSONRequestBody `bson:"body"`
}

type PostCategoryResponseObject interface {
	VisitPostCategoryResponse(w http.ResponseWriter) error
}

type PostCategory201JSONResponse Category

func (response PostCategory201JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory400JSONResponse HTTPError

func (response PostCategory400JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory401JSONResponse HTTPError

func (response PostCategory401JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory403JSONResponse HTTPError

func (response PostCategory403JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory409JSONResponse HTTPError

func (response PostCategory409JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory500JSONResponse HTTPError

func (response PostCategory500JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type MarkDeleteCategoryResponseObject interface {
	VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error
}

type MarkDeleteCategory204Response struct {
}

func (response MarkDeleteCategory204Response) VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteCategory404JSONResponse HTTPError

func (response MarkDeleteCategory404JSONResponse) VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCategory500JSONResponse HTTPError

func (response MarkDeleteCategory500JSONResponse) VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type GetCategoryResponseObject interface {
	VisitGetCategoryResponse(w http.ResponseWriter) error
}

type GetCategory200JSONResponse Category

func (response GetCategory200JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory404JSONResponse HTTPError

func (response GetCategory404JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory500JSONResponse HTTPError

func (response GetCategory500JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategoryRequestObject struct {
	CategoryId UUID                          `json:"category_id" bson:"category_id"`
	Body       *PatchCategoryJSONRequestBody `bson:"body"`
}

type PatchCategoryResponseObject interface {
	VisitPatchCategoryResponse(w http.ResponseWriter) error
}

type PatchCategory200JSONResponse Category

func (response PatchCategory200JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory400JSONResponse HTTPError

func (response PatchCategory400JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory401JSONResponse HTTPError

func (response PatchCategory401JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory403JSONResponse HTTPError

func (response PatchCategory403JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory404JSONResponse HTTPError

func (response PatchCategory404JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory500JSONResponse HTTPError

func (response PatchCategory500JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryItemsRequestObject struct {
	CategoryId UUID                   `json:"category_id" bson:"category_id"`
	Params     GetCategoryItemsParams `bson:"params"`
}

type GetCategoryItemsResponseObject interface {
	VisitGetCategoryItemsResponse(w http.ResponseWriter) error
}

type GetCategoryItems200JSONResponse struct {
	Items   *[]Item `json:"items,omitempty" bson:"items"`
	Limit   *uint64 `json:"limit,omitempty" bson:"limit"`
	MaxPage *uint64 `json:"max_page,omitempty" bson:"max_page"`
	Page    *uint64 `json:"page,omitempty" bson:"page"`
}

func (response GetCategoryItems200JSONResponse) VisitGetCategoryItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryItems404JSONResponse HTTPError

func (response GetCategoryItems404JSONResponse) VisitGetCategoryItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryItems500JSONResponse HTTPError

func (response GetCategoryItems500JSONResponse) VisitGetCategoryItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostItemRequestObject struct {
	CategoryId UUID                     `json:"category_id" bson:"category_id"`
	Body       *PostItemJSONRequestBody `bson:"body"`
}

type PostItemResponseObject interface {
	VisitPostItemResponse(w http.ResponseWriter) error
}

type PostItem201JSONResponse Item

func (response PostItem201JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostItem400JSONResponse HTTPError

func (response PostItem400JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostItem401JSONResponse HTTPError

func (response PostItem401JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostItem403JSONResponse HTTPError

func (response PostItem403JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostItem409JSONResponse HTTPError

func (response PostItem409JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostItem500JSONResponse HTTPError

func (response PostItem500JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItemRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
	ItemId     UUID `json:"item_id" bson:"item_id"`
}

type MarkDeleteItemResponseObject interface {
	VisitMarkDeleteItemResponse(w http.ResponseWriter) error
}

type MarkDeleteItem204Response struct {
}

func (response MarkDeleteItem204Response) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteItem401JSONResponse HTTPError

func (response MarkDeleteItem401JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItem403JSONResponse HTTPError

func (response MarkDeleteItem403JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItem404JSONResponse HTTPError

func (response MarkDeleteItem404JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItem500JSONResponse HTTPError

func (response MarkDeleteItem500JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchItemRequestObject struct {
	CategoryId UUID                      `json:"category_id" bson:"category_id"`
	ItemId     UUID                      `json:"item_id" bson:"item_id"`
	Body       *PatchItemJSONRequestBody `bson:"body"`
}

type PatchItemResponseObject interface {
	VisitPatchItemResponse(w http.ResponseWriter) error
}

type PatchItem200JSONResponse Item

func (response PatchItem200JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem400JSONResponse HTTPError

func (response PatchItem400JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem401JSONResponse HTTPError

func (response PatchItem401JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem403JSONResponse HTTPError

func (response PatchItem403JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem404JSONResponse HTTPError

func (response PatchItem404JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem500JSONResponse HTTPError

func (response PatchItem500JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemPictureRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
	ItemId     UUID `json:"item_id" bson:"item_id"`
}

type GetItemPictureResponseObject interface {
	VisitGetItemPictureResponse(w http.ResponseWriter) error
}

type GetItemPicture200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetItemPicture200ImagepngResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetItemPicture404JSONResponse HTTPError

func (response GetItemPicture404JSONResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemPicture500JSONResponse HTTPError

func (response GetItemPicture500JSONResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryPictureRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type GetCategoryPictureResponseObject interface {
	VisitGetCategoryPictureResponse(w http.ResponseWriter) error
}

type GetCategoryPicture200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetCategoryPicture200ImagepngResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetCategoryPicture404JSONResponse HTTPError

func (response GetCategoryPicture404JSONResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryPicture500JSONResponse HTTPError

func (response GetCategoryPicture500JSONResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccountsRequestObject struct {
	Params GetDeletedAccountsParams `bson:"params"`
}

type GetDeletedAccountsResponseObject interface {
	VisitGetDeletedAccountsResponse(w http.ResponseWriter) error
}

type GetDeletedAccounts200JSONResponse struct {
	Accounts []Account `json:"accounts" bson:"accounts"`
	Limit    uint64    `json:"limit" bson:"limit"`
	MaxPage  uint64    `json:"max_page" bson:"max_page"`
	Page     uint64    `json:"page" bson:"page"`
}

func (response GetDeletedAccounts200JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccounts401JSONResponse HTTPError

func (response GetDeletedAccounts401JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccounts403JSONResponse HTTPError

func (response GetDeletedAccounts403JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccounts500JSONResponse HTTPError

func (response GetDeletedAccounts500JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type DeleteAccountResponseObject interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount204Response struct {
}

func (response DeleteAccount204Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAccount401JSONResponse HTTPError

func (response DeleteAccount401JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount403JSONResponse HTTPError

func (response DeleteAccount403JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount404JSONResponse HTTPError

func (response DeleteAccount404JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount409JSONResponse HTTPError

func (response DeleteAccount409JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount500JSONResponse HTTPError

func (response DeleteAccount500JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccountRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type RestoreDeletedAccountResponseObject interface {
	VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error
}

type RestoreDeletedAccount204Response struct {
}

func (response RestoreDeletedAccount204Response) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedAccount400JSONResponse HTTPError

func (response RestoreDeletedAccount400JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount401JSONResponse HTTPError

func (response RestoreDeletedAccount401JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount403JSONResponse HTTPError

func (response RestoreDeletedAccount403JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount404JSONResponse HTTPError

func (response RestoreDeletedAccount404JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount409JSONResponse HTTPError

func (response RestoreDeletedAccount409JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount500JSONResponse HTTPError

func (response RestoreDeletedAccount500JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImagesRequestObject struct {
	Params GetDeletedCarouselImagesParams `bson:"params"`
}

type GetDeletedCarouselImagesResponseObject interface {
	VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error
}

type GetDeletedCarouselImages200JSONResponse struct {
	Items   []CarouselImage `json:"items" bson:"items"`
	Limit   uint64          `json:"limit" bson:"limit"`
	MaxPage uint64          `json:"max_page" bson:"max_page"`
	Page    uint64          `json:"page" bson:"page"`
}

func (response GetDeletedCarouselImages200JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImages401JSONResponse HTTPError

func (response GetDeletedCarouselImages401JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImages403JSONResponse HTTPError

func (response GetDeletedCarouselImages403JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImages500JSONResponse HTTPError

func (response GetDeletedCarouselImages500JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type DeleteCarouselImageResponseObject interface {
	VisitDeleteCarouselImageResponse(w http.ResponseWriter) error
}

type DeleteCarouselImage204Response struct {
}

func (response DeleteCarouselImage204Response) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCarouselImage401JSONResponse HTTPError

func (response DeleteCarouselImage401JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage403JSONResponse HTTPError

func (response DeleteCarouselImage403JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage404JSONResponse HTTPError

func (response DeleteCarouselImage404JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage409JSONResponse HTTPError

func (response DeleteCarouselImage409JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage500JSONResponse HTTPError

func (response DeleteCarouselImage500JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type RestoreDeletedCarouselImageResponseObject interface {
	VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error
}

type RestoreDeletedCarouselImage204Response struct {
}

func (response RestoreDeletedCarouselImage204Response) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedCarouselImage400JSONResponse HTTPError

func (response RestoreDeletedCarouselImage400JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage401JSONResponse HTTPError

func (response RestoreDeletedCarouselImage401JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage403JSONResponse HTTPError

func (response RestoreDeletedCarouselImage403JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage404JSONResponse HTTPError

func (response RestoreDeletedCarouselImage404JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage409JSONResponse HTTPError

func (response RestoreDeletedCarouselImage409JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage500JSONResponse HTTPError

func (response RestoreDeletedCarouselImage500JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTextsRequestObject struct {
	Params GetDeletedCarouselTextsParams `bson:"params"`
}

type GetDeletedCarouselTextsResponseObject interface {
	VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error
}

type GetDeletedCarouselTexts200JSONResponse struct {
	Items   []CarouselText `json:"items" bson:"items"`
	Limit   uint64         `json:"limit" bson:"limit"`
	MaxPage uint64         `json:"max_page" bson:"max_page"`
	Page    uint64         `json:"page" bson:"page"`
}

func (response GetDeletedCarouselTexts200JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTexts401JSONResponse HTTPError

func (response GetDeletedCarouselTexts401JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTexts403JSONResponse HTTPError

func (response GetDeletedCarouselTexts403JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTexts500JSONResponse HTTPError

func (response GetDeletedCarouselTexts500JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselTextRequestObject struct {
	TextId UUID `json:"text_id" bson:"text_id"`
}

type DeleteCarouselTextResponseObject interface {
	VisitDeleteCarouselTextResponse(w http.ResponseWriter) error
}

type DeleteCarouselText204Response struct {
}

func (response DeleteCarouselText204Response) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCarouselText401JSONResponse HTTPError

func (response DeleteCarouselText401JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText403JSONResponse HTTPError

func (response DeleteCarouselText403JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText404JSONResponse HTTPError

func (response DeleteCarouselText404JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText409JSONResponse HTTPError

func (response DeleteCarouselText409JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText500JSONResponse HTTPError

func (response DeleteCarouselText500JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselTextRequestObject struct {
	TextId UUID `json:"text_id" bson:"text_id"`
}

type RestoreDeletedCarouselTextResponseObject interface {
	VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error
}

type RestoreDeletedCarouselText204Response struct {
}

func (response RestoreDeletedCarouselText204Response) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedCarouselText400JSONResponse HTTPError

func (response RestoreDeletedCarouselText400JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText401JSONResponse HTTPError

func (response RestoreDeletedCarouselText401JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText403JSONResponse HTTPError

func (response RestoreDeletedCarouselText403JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText404JSONResponse HTTPError

func (response RestoreDeletedCarouselText404JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText409JSONResponse HTTPError

func (response RestoreDeletedCarouselText409JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText500JSONResponse HTTPError

func (response RestoreDeletedCarouselText500JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategoriesRequestObject struct {
	Params GetDeletedCategoriesParams `bson:"params"`
}

type GetDeletedCategoriesResponseObject interface {
	VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error
}

type GetDeletedCategories200JSONResponse struct {
	Categories []Category `json:"categories" bson:"categories"`
	Limit      uint64     `json:"limit" bson:"limit"`
	MaxPage    uint64     `json:"max_page" bson:"max_page"`
	Page       uint64     `json:"page" bson:"page"`
}

func (response GetDeletedCategories200JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategories401JSONResponse HTTPError

func (response GetDeletedCategories401JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategories403JSONResponse HTTPError

func (response GetDeletedCategories403JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategories500JSONResponse HTTPError

func (response GetDeletedCategories500JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory204Response struct {
}

func (response DeleteCategory204Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategory401JSONResponse HTTPError

func (response DeleteCategory401JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory403JSONResponse HTTPError

func (response DeleteCategory403JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory404JSONResponse HTTPError

func (response DeleteCategory404JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory409JSONResponse HTTPError

func (response DeleteCategory409JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory500JSONResponse HTTPError

func (response DeleteCategory500JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type RestoreDeletedCategoryResponseObject interface {
	VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error
}

type RestoreDeletedCategory204Response struct {
}

func (response RestoreDeletedCategory204Response) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedCategory400JSONResponse HTTPError

func (response RestoreDeletedCategory400JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory401JSONResponse HTTPError

func (response RestoreDeletedCategory401JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory403JSONResponse HTTPError

func (response RestoreDeletedCategory403JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory404JSONResponse HTTPError

func (response RestoreDeletedCategory404JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory409JSONResponse HTTPError

func (response RestoreDeletedCategory409JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory500JSONResponse HTTPError

func (response RestoreDeletedCategory500JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItemsRequestObject struct {
	Params GetDeletedItemsParams `bson:"params"`
}

type GetDeletedItemsResponseObject interface {
	VisitGetDeletedItemsResponse(w http.ResponseWriter) error
}

type GetDeletedItems200JSONResponse struct {
	Items   []Item `json:"items" bson:"items"`
	Limit   uint64 `json:"limit" bson:"limit"`
	MaxPage uint64 `json:"max_page" bson:"max_page"`
	Page    uint64 `json:"page" bson:"page"`
}

func (response GetDeletedItems200JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItems401JSONResponse HTTPError

func (response GetDeletedItems401JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItems403JSONResponse HTTPError

func (response GetDeletedItems403JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItems500JSONResponse HTTPError

func (response GetDeletedItems500JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItemRequestObject struct {
	ItemId UUID `json:"item_id" bson:"item_id"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem401JSONResponse HTTPError

func (response DeleteItem401JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem403JSONResponse HTTPError

func (response DeleteItem403JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem404JSONResponse HTTPError

func (response DeleteItem404JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem409JSONResponse HTTPError

func (response DeleteItem409JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem500JSONResponse HTTPError

func (response DeleteItem500JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItemRequestObject struct {
	ItemId UUID `json:"item_id" bson:"item_id"`
}

type RestoreDeletedItemResponseObject interface {
	VisitRestoreDeletedItemResponse(w http.ResponseWriter) error
}

type RestoreDeletedItem204Response struct {
}

func (response RestoreDeletedItem204Response) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedItem400JSONResponse HTTPError

func (response RestoreDeletedItem400JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem401JSONResponse HTTPError

func (response RestoreDeletedItem401JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem403JSONResponse HTTPError

func (response RestoreDeletedItem403JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem404JSONResponse HTTPError

func (response RestoreDeletedItem404JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem409JSONResponse HTTPError

func (response RestoreDeletedItem409JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem500JSONResponse HTTPError

func (response RestoreDeletedItem500JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefillsRequestObject struct {
	Params GetDeletedRefillsParams `bson:"params"`
}

type GetDeletedRefillsResponseObject interface {
	VisitGetDeletedRefillsResponse(w http.ResponseWriter) error
}

type GetDeletedRefills200JSONResponse struct {
	Limit   uint64   `json:"limit" bson:"limit"`
	MaxPage uint64   `json:"max_page" bson:"max_page"`
	Page    uint64   `json:"page" bson:"page"`
	Refills []Refill `json:"refills" bson:"refills"`
}

func (response GetDeletedRefills200JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefills401JSONResponse HTTPError

func (response GetDeletedRefills401JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefills403JSONResponse HTTPError

func (response GetDeletedRefills403JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefills500JSONResponse HTTPError

func (response GetDeletedRefills500JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefillRequestObject struct {
	RefillId UUID `json:"refill_id" bson:"refill_id"`
}

type DeleteRefillResponseObject interface {
	VisitDeleteRefillResponse(w http.ResponseWriter) error
}

type DeleteRefill204Response struct {
}

func (response DeleteRefill204Response) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRefill401JSONResponse HTTPError

func (response DeleteRefill401JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill403JSONResponse HTTPError

func (response DeleteRefill403JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill404JSONResponse HTTPError

func (response DeleteRefill404JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill409JSONResponse HTTPError

func (response DeleteRefill409JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill500JSONResponse HTTPError

func (response DeleteRefill500JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefillRequestObject struct {
	RefillId UUID `json:"refill_id" bson:"refill_id"`
}

type RestoreDeletedRefillResponseObject interface {
	VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error
}

type RestoreDeletedRefill204Response struct {
}

func (response RestoreDeletedRefill204Response) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedRefill400JSONResponse HTTPError

func (response RestoreDeletedRefill400JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill401JSONResponse HTTPError

func (response RestoreDeletedRefill401JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill403JSONResponse HTTPError

func (response RestoreDeletedRefill403JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill404JSONResponse HTTPError

func (response RestoreDeletedRefill404JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill409JSONResponse HTTPError

func (response RestoreDeletedRefill409JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill500JSONResponse HTTPError

func (response RestoreDeletedRefill500JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactionsRequestObject struct {
	Params GetDeletedTransactionsParams `bson:"params"`
}

type GetDeletedTransactionsResponseObject interface {
	VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error
}

type GetDeletedTransactions200JSONResponse struct {
	Limit        uint64        `json:"limit" bson:"limit"`
	MaxPage      uint64        `json:"max_page" bson:"max_page"`
	Page         uint64        `json:"page" bson:"page"`
	Transactions []Transaction `json:"transactions" bson:"transactions"`
}

func (response GetDeletedTransactions200JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactions401JSONResponse HTTPError

func (response GetDeletedTransactions401JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactions403JSONResponse HTTPError

func (response GetDeletedTransactions403JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactions500JSONResponse HTTPError

func (response GetDeletedTransactions500JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionRequestObject struct {
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type DeleteTransactionResponseObject interface {
	VisitDeleteTransactionResponse(w http.ResponseWriter) error
}

type DeleteTransaction204Response struct {
}

func (response DeleteTransaction204Response) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTransaction401JSONResponse HTTPError

func (response DeleteTransaction401JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction403JSONResponse HTTPError

func (response DeleteTransaction403JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction404JSONResponse HTTPError

func (response DeleteTransaction404JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction409JSONResponse HTTPError

func (response DeleteTransaction409JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction500JSONResponse HTTPError

func (response DeleteTransaction500JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransactionRequestObject struct {
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type RestoreDeletedTransactionResponseObject interface {
	VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error
}

type RestoreDeletedTransaction204Response struct {
}

func (response RestoreDeletedTransaction204Response) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedTransaction400JSONResponse HTTPError

func (response RestoreDeletedTransaction400JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction401JSONResponse HTTPError

func (response RestoreDeletedTransaction401JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction403JSONResponse HTTPError

func (response RestoreDeletedTransaction403JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction404JSONResponse HTTPError

func (response RestoreDeletedTransaction404JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction409JSONResponse HTTPError

func (response RestoreDeletedTransaction409JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction500JSONResponse HTTPError

func (response RestoreDeletedTransaction500JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccountsRequestObject struct {
	Body *multipart.Reader `bson:"body"`
}

type ImportAccountsResponseObject interface {
	VisitImportAccountsResponse(w http.ResponseWriter) error
}

type ImportAccounts200JSONResponse struct {
	Message     *Messages `json:"message,omitempty" bson:"message"`
	NotAccepted *[]string `json:"not_accepted,omitempty" bson:"not_accepted"`
}

func (response ImportAccounts200JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts400JSONResponse HTTPError

func (response ImportAccounts400JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts401JSONResponse HTTPError

func (response ImportAccounts401JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts403JSONResponse HTTPError

func (response ImportAccounts403JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts409JSONResponse HTTPError

func (response ImportAccounts409JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts500JSONResponse HTTPError

func (response ImportAccounts500JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllItemsRequestObject struct {
	Params GetAllItemsParams `bson:"params"`
}

type GetAllItemsResponseObject interface {
	VisitGetAllItemsResponse(w http.ResponseWriter) error
}

type GetAllItems200JSONResponse struct {
	Items   *[]Item `json:"items,omitempty" bson:"items"`
	Limit   *uint64 `json:"limit,omitempty" bson:"limit"`
	MaxPage *uint64 `json:"max_page,omitempty" bson:"max_page"`
	Page    *uint64 `json:"page,omitempty" bson:"page"`
}

func (response GetAllItems200JSONResponse) VisitGetAllItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllItems403JSONResponse HTTPError

func (response GetAllItems403JSONResponse) VisitGetAllItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllItems500JSONResponse HTTPError

func (response GetAllItems500JSONResponse) VisitGetAllItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401JSONResponse HTTPError

func (response Logout401JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Logout500JSONResponse HTTPError

func (response Logout500JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRefillsRequestObject struct {
	Params GetRefillsParams `bson:"params"`
}

type GetRefillsResponseObject interface {
	VisitGetRefillsResponse(w http.ResponseWriter) error
}

type GetRefills200JSONResponse struct {
	Limit   *uint64   `json:"limit,omitempty" bson:"limit"`
	MaxPage *uint64   `json:"max_page,omitempty" bson:"max_page"`
	Page    *uint64   `json:"page,omitempty" bson:"page"`
	Refills *[]Refill `json:"refills,omitempty" bson:"refills"`
}

func (response GetRefills200JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills401JSONResponse HTTPError

func (response GetRefills401JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills403JSONResponse HTTPError

func (response GetRefills403JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills500JSONResponse HTTPError

func (response GetRefills500JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsRequestObject struct {
	Params GetTransactionsParams `bson:"params"`
}

type GetTransactionsResponseObject interface {
	VisitGetTransactionsResponse(w http.ResponseWriter) error
}

type GetTransactions200JSONResponse struct {
	Limit        *uint64        `json:"limit,omitempty" bson:"limit"`
	MaxPage      *uint64        `json:"max_page,omitempty" bson:"max_page"`
	Page         *uint64        `json:"page,omitempty" bson:"page"`
	Transactions *[]Transaction `json:"transactions,omitempty" bson:"transactions"`
}

func (response GetTransactions200JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions401JSONResponse HTTPError

func (response GetTransactions401JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions403JSONResponse HTTPError

func (response GetTransactions403JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions500JSONResponse HTTPError

func (response GetTransactions500JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /account)
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)

	// (PATCH /account)
	PatchAccount(ctx context.Context, request PatchAccountRequestObject) (PatchAccountResponseObject, error)

	// (GET /account/admin)
	GetAccountAdmin(ctx context.Context, request GetAccountAdminRequestObject) (GetAccountAdminResponseObject, error)

	// (GET /account/qr)
	GetAccountQRWebsocket(ctx context.Context, request GetAccountQRWebsocketRequestObject) (GetAccountQRWebsocketResponseObject, error)

	// (POST /account/qr)
	GetAccountQR(ctx context.Context, request GetAccountQRRequestObject) (GetAccountQRResponseObject, error)

	// (GET /account/refills)
	GetSelfRefills(ctx context.Context, request GetSelfRefillsRequestObject) (GetSelfRefillsResponseObject, error)

	// (GET /account/transactions)
	GetCurrentAccountTransactions(ctx context.Context, request GetCurrentAccountTransactionsRequestObject) (GetCurrentAccountTransactionsResponseObject, error)

	// (POST /account/transactions)
	PostTransactions(ctx context.Context, request PostTransactionsRequestObject) (PostTransactionsResponseObject, error)

	// (GET /accounts)
	GetAccounts(ctx context.Context, request GetAccountsRequestObject) (GetAccountsResponseObject, error)

	// (POST /accounts)
	PostAccounts(ctx context.Context, request PostAccountsRequestObject) (PostAccountsResponseObject, error)

	// (DELETE /accounts/{account_id})
	MarkDeleteAccountId(ctx context.Context, request MarkDeleteAccountIdRequestObject) (MarkDeleteAccountIdResponseObject, error)

	// (GET /accounts/{account_id})
	GetAccountId(ctx context.Context, request GetAccountIdRequestObject) (GetAccountIdResponseObject, error)

	// (PATCH /accounts/{account_id})
	PatchAccountId(ctx context.Context, request PatchAccountIdRequestObject) (PatchAccountIdResponseObject, error)

	// (GET /accounts/{account_id}/refills)
	GetAccountRefills(ctx context.Context, request GetAccountRefillsRequestObject) (GetAccountRefillsResponseObject, error)

	// (POST /accounts/{account_id}/refills)
	PostRefill(ctx context.Context, request PostRefillRequestObject) (PostRefillResponseObject, error)

	// (DELETE /accounts/{account_id}/refills/{refill_id})
	MarkDeleteRefill(ctx context.Context, request MarkDeleteRefillRequestObject) (MarkDeleteRefillResponseObject, error)

	// (PATCH /accounts/{account_id}/refills/{refill_id})
	PatchRefillId(ctx context.Context, request PatchRefillIdRequestObject) (PatchRefillIdResponseObject, error)

	// (GET /accounts/{account_id}/transactions)
	GetAccountTransactions(ctx context.Context, request GetAccountTransactionsRequestObject) (GetAccountTransactionsResponseObject, error)

	// (DELETE /accounts/{account_id}/transactions/{transaction_id})
	MarkDeleteTransactionId(ctx context.Context, request MarkDeleteTransactionIdRequestObject) (MarkDeleteTransactionIdResponseObject, error)

	// (GET /accounts/{account_id}/transactions/{transaction_id})
	GetTransactionId(ctx context.Context, request GetTransactionIdRequestObject) (GetTransactionIdResponseObject, error)

	// (PATCH /accounts/{account_id}/transactions/{transaction_id})
	PatchTransactionId(ctx context.Context, request PatchTransactionIdRequestObject) (PatchTransactionIdResponseObject, error)

	// (PATCH /accounts/{account_id}/transactions/{transaction_id}/{item_id})
	PatchTransactionItemId(ctx context.Context, request PatchTransactionItemIdRequestObject) (PatchTransactionItemIdResponseObject, error)

	// (POST /auth/card)
	ConnectCard(ctx context.Context, request ConnectCardRequestObject) (ConnectCardResponseObject, error)

	// (GET /auth/google)
	ConnectGoogle(ctx context.Context, request ConnectGoogleRequestObject) (ConnectGoogleResponseObject, error)

	// (GET /auth/google/begin/{qr_nonce})
	ConnectAccount(ctx context.Context, request ConnectAccountRequestObject) (ConnectAccountResponseObject, error)

	// (GET /auth/google/callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)

	// (GET /carousel/images)
	GetCarouselImages(ctx context.Context, request GetCarouselImagesRequestObject) (GetCarouselImagesResponseObject, error)

	// (POST /carousel/images)
	AddCarouselImage(ctx context.Context, request AddCarouselImageRequestObject) (AddCarouselImageResponseObject, error)

	// (DELETE /carousel/images/{image_id})
	MarkDeleteCarouselImage(ctx context.Context, request MarkDeleteCarouselImageRequestObject) (MarkDeleteCarouselImageResponseObject, error)

	// (GET /carousel/images/{image_id})
	GetCarouselImage(ctx context.Context, request GetCarouselImageRequestObject) (GetCarouselImageResponseObject, error)

	// (GET /carousel/texts)
	GetCarouselTexts(ctx context.Context, request GetCarouselTextsRequestObject) (GetCarouselTextsResponseObject, error)

	// (POST /carousel/texts)
	AddCarouselText(ctx context.Context, request AddCarouselTextRequestObject) (AddCarouselTextResponseObject, error)

	// (DELETE /carousel/texts/{text_id})
	MarkDeleteCarouselText(ctx context.Context, request MarkDeleteCarouselTextRequestObject) (MarkDeleteCarouselTextResponseObject, error)

	// (GET /categories)
	GetCategories(ctx context.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)

	// (POST /categories)
	PostCategory(ctx context.Context, request PostCategoryRequestObject) (PostCategoryResponseObject, error)

	// (DELETE /categories/{category_id})
	MarkDeleteCategory(ctx context.Context, request MarkDeleteCategoryRequestObject) (MarkDeleteCategoryResponseObject, error)

	// (GET /categories/{category_id})
	GetCategory(ctx context.Context, request GetCategoryRequestObject) (GetCategoryResponseObject, error)

	// (PATCH /categories/{category_id})
	PatchCategory(ctx context.Context, request PatchCategoryRequestObject) (PatchCategoryResponseObject, error)

	// (GET /categories/{category_id}/items)
	GetCategoryItems(ctx context.Context, request GetCategoryItemsRequestObject) (GetCategoryItemsResponseObject, error)

	// (POST /categories/{category_id}/items)
	PostItem(ctx context.Context, request PostItemRequestObject) (PostItemResponseObject, error)

	// (DELETE /categories/{category_id}/items/{item_id})
	MarkDeleteItem(ctx context.Context, request MarkDeleteItemRequestObject) (MarkDeleteItemResponseObject, error)

	// (PATCH /categories/{category_id}/items/{item_id})
	PatchItem(ctx context.Context, request PatchItemRequestObject) (PatchItemResponseObject, error)

	// (GET /categories/{category_id}/items/{item_id}/picture)
	GetItemPicture(ctx context.Context, request GetItemPictureRequestObject) (GetItemPictureResponseObject, error)

	// (GET /categories/{category_id}/picture)
	GetCategoryPicture(ctx context.Context, request GetCategoryPictureRequestObject) (GetCategoryPictureResponseObject, error)

	// (GET /deleted/accounts)
	GetDeletedAccounts(ctx context.Context, request GetDeletedAccountsRequestObject) (GetDeletedAccountsResponseObject, error)

	// (DELETE /deleted/accounts/{account_id})
	DeleteAccount(ctx context.Context, request DeleteAccountRequestObject) (DeleteAccountResponseObject, error)

	// (PATCH /deleted/accounts/{account_id})
	RestoreDeletedAccount(ctx context.Context, request RestoreDeletedAccountRequestObject) (RestoreDeletedAccountResponseObject, error)

	// (GET /deleted/carousel/images)
	GetDeletedCarouselImages(ctx context.Context, request GetDeletedCarouselImagesRequestObject) (GetDeletedCarouselImagesResponseObject, error)

	// (DELETE /deleted/carousel/images/{image_id})
	DeleteCarouselImage(ctx context.Context, request DeleteCarouselImageRequestObject) (DeleteCarouselImageResponseObject, error)

	// (PATCH /deleted/carousel/images/{image_id})
	RestoreDeletedCarouselImage(ctx context.Context, request RestoreDeletedCarouselImageRequestObject) (RestoreDeletedCarouselImageResponseObject, error)

	// (GET /deleted/carousel/texts)
	GetDeletedCarouselTexts(ctx context.Context, request GetDeletedCarouselTextsRequestObject) (GetDeletedCarouselTextsResponseObject, error)

	// (DELETE /deleted/carousel/texts/{text_id})
	DeleteCarouselText(ctx context.Context, request DeleteCarouselTextRequestObject) (DeleteCarouselTextResponseObject, error)

	// (PATCH /deleted/carousel/texts/{text_id})
	RestoreDeletedCarouselText(ctx context.Context, request RestoreDeletedCarouselTextRequestObject) (RestoreDeletedCarouselTextResponseObject, error)

	// (GET /deleted/categories)
	GetDeletedCategories(ctx context.Context, request GetDeletedCategoriesRequestObject) (GetDeletedCategoriesResponseObject, error)

	// (DELETE /deleted/categories/{category_id})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)

	// (PATCH /deleted/categories/{category_id})
	RestoreDeletedCategory(ctx context.Context, request RestoreDeletedCategoryRequestObject) (RestoreDeletedCategoryResponseObject, error)

	// (GET /deleted/items)
	GetDeletedItems(ctx context.Context, request GetDeletedItemsRequestObject) (GetDeletedItemsResponseObject, error)

	// (DELETE /deleted/items/{item_id})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)

	// (PATCH /deleted/items/{item_id})
	RestoreDeletedItem(ctx context.Context, request RestoreDeletedItemRequestObject) (RestoreDeletedItemResponseObject, error)

	// (GET /deleted/refills)
	GetDeletedRefills(ctx context.Context, request GetDeletedRefillsRequestObject) (GetDeletedRefillsResponseObject, error)

	// (DELETE /deleted/refills/{refill_id})
	DeleteRefill(ctx context.Context, request DeleteRefillRequestObject) (DeleteRefillResponseObject, error)

	// (PATCH /deleted/refills/{refill_id})
	RestoreDeletedRefill(ctx context.Context, request RestoreDeletedRefillRequestObject) (RestoreDeletedRefillResponseObject, error)

	// (GET /deleted/transactions)
	GetDeletedTransactions(ctx context.Context, request GetDeletedTransactionsRequestObject) (GetDeletedTransactionsResponseObject, error)

	// (DELETE /deleted/transactions/{transaction_id})
	DeleteTransaction(ctx context.Context, request DeleteTransactionRequestObject) (DeleteTransactionResponseObject, error)

	// (PATCH /deleted/transactions/{transaction_id})
	RestoreDeletedTransaction(ctx context.Context, request RestoreDeletedTransactionRequestObject) (RestoreDeletedTransactionResponseObject, error)

	// (POST /import/accounts)
	ImportAccounts(ctx context.Context, request ImportAccountsRequestObject) (ImportAccountsResponseObject, error)

	// (GET /items)
	GetAllItems(ctx context.Context, request GetAllItemsRequestObject) (GetAllItemsResponseObject, error)

	// (GET /logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (GET /refills)
	GetRefills(ctx context.Context, request GetRefillsRequestObject) (GetRefillsResponseObject, error)

	// (GET /transactions)
	GetTransactions(ctx context.Context, request GetTransactionsRequestObject) (GetTransactionsResponseObject, error)
}

type StrictHandlerFunc = runtime.StrictEchoHandlerFunc
type StrictMiddlewareFunc = runtime.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface  `bson:"ssi"`
	middlewares []StrictMiddlewareFunc `bson:"middlewares"`
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx echo.Context) error {
	var request GetAccountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx.Request().Context(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		return validResponse.VisitGetAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchAccount operation middleware
func (sh *strictHandler) PatchAccount(ctx echo.Context) error {
	var request PatchAccountRequestObject

	var body PatchAccountJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAccount(ctx.Request().Context(), request.(PatchAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchAccountResponseObject); ok {
		return validResponse.VisitPatchAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountAdmin operation middleware
func (sh *strictHandler) GetAccountAdmin(ctx echo.Context) error {
	var request GetAccountAdminRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountAdmin(ctx.Request().Context(), request.(GetAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountAdminResponseObject); ok {
		return validResponse.VisitGetAccountAdminResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountQRWebsocket operation middleware
func (sh *strictHandler) GetAccountQRWebsocket(ctx echo.Context) error {
	var request GetAccountQRWebsocketRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountQRWebsocket(ctx.Request().Context(), request.(GetAccountQRWebsocketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountQRWebsocket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountQRWebsocketResponseObject); ok {
		return validResponse.VisitGetAccountQRWebsocketResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountQR operation middleware
func (sh *strictHandler) GetAccountQR(ctx echo.Context) error {
	var request GetAccountQRRequestObject

	var body GetAccountQRJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountQR(ctx.Request().Context(), request.(GetAccountQRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountQR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountQRResponseObject); ok {
		return validResponse.VisitGetAccountQRResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetSelfRefills operation middleware
func (sh *strictHandler) GetSelfRefills(ctx echo.Context, params GetSelfRefillsParams) error {
	var request GetSelfRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSelfRefills(ctx.Request().Context(), request.(GetSelfRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSelfRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSelfRefillsResponseObject); ok {
		return validResponse.VisitGetSelfRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentAccountTransactions operation middleware
func (sh *strictHandler) GetCurrentAccountTransactions(ctx echo.Context, params GetCurrentAccountTransactionsParams) error {
	var request GetCurrentAccountTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentAccountTransactions(ctx.Request().Context(), request.(GetCurrentAccountTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentAccountTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCurrentAccountTransactionsResponseObject); ok {
		return validResponse.VisitGetCurrentAccountTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostTransactions operation middleware
func (sh *strictHandler) PostTransactions(ctx echo.Context) error {
	var request PostTransactionsRequestObject

	var body PostTransactionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTransactions(ctx.Request().Context(), request.(PostTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTransactionsResponseObject); ok {
		return validResponse.VisitPostTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccounts operation middleware
func (sh *strictHandler) GetAccounts(ctx echo.Context, params GetAccountsParams) error {
	var request GetAccountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccounts(ctx.Request().Context(), request.(GetAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountsResponseObject); ok {
		return validResponse.VisitGetAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostAccounts operation middleware
func (sh *strictHandler) PostAccounts(ctx echo.Context) error {
	var request PostAccountsRequestObject

	var body PostAccountsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccounts(ctx.Request().Context(), request.(PostAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAccountsResponseObject); ok {
		return validResponse.VisitPostAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteAccountId operation middleware
func (sh *strictHandler) MarkDeleteAccountId(ctx echo.Context, accountId UUID) error {
	var request MarkDeleteAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteAccountId(ctx.Request().Context(), request.(MarkDeleteAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteAccountIdResponseObject); ok {
		return validResponse.VisitMarkDeleteAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountId operation middleware
func (sh *strictHandler) GetAccountId(ctx echo.Context, accountId UUID) error {
	var request GetAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountId(ctx.Request().Context(), request.(GetAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountIdResponseObject); ok {
		return validResponse.VisitGetAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchAccountId operation middleware
func (sh *strictHandler) PatchAccountId(ctx echo.Context, accountId UUID) error {
	var request PatchAccountIdRequestObject

	request.AccountId = accountId

	var body PatchAccountIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAccountId(ctx.Request().Context(), request.(PatchAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchAccountIdResponseObject); ok {
		return validResponse.VisitPatchAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountRefills operation middleware
func (sh *strictHandler) GetAccountRefills(ctx echo.Context, accountId string, params GetAccountRefillsParams) error {
	var request GetAccountRefillsRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountRefills(ctx.Request().Context(), request.(GetAccountRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountRefillsResponseObject); ok {
		return validResponse.VisitGetAccountRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostRefill operation middleware
func (sh *strictHandler) PostRefill(ctx echo.Context, accountId string, params PostRefillParams) error {
	var request PostRefillRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefill(ctx.Request().Context(), request.(PostRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRefillResponseObject); ok {
		return validResponse.VisitPostRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteRefill operation middleware
func (sh *strictHandler) MarkDeleteRefill(ctx echo.Context, accountId UUID, refillId UUID) error {
	var request MarkDeleteRefillRequestObject

	request.AccountId = accountId
	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteRefill(ctx.Request().Context(), request.(MarkDeleteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteRefillResponseObject); ok {
		return validResponse.VisitMarkDeleteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchRefillId operation middleware
func (sh *strictHandler) PatchRefillId(ctx echo.Context, accountId UUID, refillId UUID, params PatchRefillIdParams) error {
	var request PatchRefillIdRequestObject

	request.AccountId = accountId
	request.RefillId = refillId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchRefillId(ctx.Request().Context(), request.(PatchRefillIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchRefillId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchRefillIdResponseObject); ok {
		return validResponse.VisitPatchRefillIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAccountTransactions operation middleware
func (sh *strictHandler) GetAccountTransactions(ctx echo.Context, accountId UUID, params GetAccountTransactionsParams) error {
	var request GetAccountTransactionsRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountTransactions(ctx.Request().Context(), request.(GetAccountTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountTransactionsResponseObject); ok {
		return validResponse.VisitGetAccountTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteTransactionId operation middleware
func (sh *strictHandler) MarkDeleteTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error {
	var request MarkDeleteTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteTransactionId(ctx.Request().Context(), request.(MarkDeleteTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteTransactionIdResponseObject); ok {
		return validResponse.VisitMarkDeleteTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTransactionId operation middleware
func (sh *strictHandler) GetTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error {
	var request GetTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionId(ctx.Request().Context(), request.(GetTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionIdResponseObject); ok {
		return validResponse.VisitGetTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchTransactionId operation middleware
func (sh *strictHandler) PatchTransactionId(ctx echo.Context, accountId UUID, transactionId UUID, params PatchTransactionIdParams) error {
	var request PatchTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTransactionId(ctx.Request().Context(), request.(PatchTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTransactionIdResponseObject); ok {
		return validResponse.VisitPatchTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchTransactionItemId operation middleware
func (sh *strictHandler) PatchTransactionItemId(ctx echo.Context, accountId UUID, transactionId UUID, itemId UUID, params PatchTransactionItemIdParams) error {
	var request PatchTransactionItemIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId
	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTransactionItemId(ctx.Request().Context(), request.(PatchTransactionItemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTransactionItemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTransactionItemIdResponseObject); ok {
		return validResponse.VisitPatchTransactionItemIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ConnectCard operation middleware
func (sh *strictHandler) ConnectCard(ctx echo.Context) error {
	var request ConnectCardRequestObject

	var body ConnectCardJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectCard(ctx.Request().Context(), request.(ConnectCardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectCard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectCardResponseObject); ok {
		return validResponse.VisitConnectCardResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ConnectGoogle operation middleware
func (sh *strictHandler) ConnectGoogle(ctx echo.Context, params ConnectGoogleParams) error {
	var request ConnectGoogleRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectGoogle(ctx.Request().Context(), request.(ConnectGoogleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectGoogle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectGoogleResponseObject); ok {
		return validResponse.VisitConnectGoogleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ConnectAccount operation middleware
func (sh *strictHandler) ConnectAccount(ctx echo.Context, qrNonce string) error {
	var request ConnectAccountRequestObject

	request.QrNonce = qrNonce

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectAccount(ctx.Request().Context(), request.(ConnectAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectAccountResponseObject); ok {
		return validResponse.VisitConnectAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Callback operation middleware
func (sh *strictHandler) Callback(ctx echo.Context, params CallbackParams) error {
	var request CallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx.Request().Context(), request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		return validResponse.VisitCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselImages operation middleware
func (sh *strictHandler) GetCarouselImages(ctx echo.Context) error {
	var request GetCarouselImagesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselImages(ctx.Request().Context(), request.(GetCarouselImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselImagesResponseObject); ok {
		return validResponse.VisitGetCarouselImagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AddCarouselImage operation middleware
func (sh *strictHandler) AddCarouselImage(ctx echo.Context) error {
	var request AddCarouselImageRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCarouselImage(ctx.Request().Context(), request.(AddCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCarouselImageResponseObject); ok {
		return validResponse.VisitAddCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteCarouselImage operation middleware
func (sh *strictHandler) MarkDeleteCarouselImage(ctx echo.Context, imageId UUID) error {
	var request MarkDeleteCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteCarouselImage(ctx.Request().Context(), request.(MarkDeleteCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteCarouselImageResponseObject); ok {
		return validResponse.VisitMarkDeleteCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselImage operation middleware
func (sh *strictHandler) GetCarouselImage(ctx echo.Context, imageId UUID) error {
	var request GetCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselImage(ctx.Request().Context(), request.(GetCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselImageResponseObject); ok {
		return validResponse.VisitGetCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselTexts operation middleware
func (sh *strictHandler) GetCarouselTexts(ctx echo.Context) error {
	var request GetCarouselTextsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselTexts(ctx.Request().Context(), request.(GetCarouselTextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselTexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselTextsResponseObject); ok {
		return validResponse.VisitGetCarouselTextsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// AddCarouselText operation middleware
func (sh *strictHandler) AddCarouselText(ctx echo.Context) error {
	var request AddCarouselTextRequestObject

	var body AddCarouselTextJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCarouselText(ctx.Request().Context(), request.(AddCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCarouselTextResponseObject); ok {
		return validResponse.VisitAddCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteCarouselText operation middleware
func (sh *strictHandler) MarkDeleteCarouselText(ctx echo.Context, textId UUID) error {
	var request MarkDeleteCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteCarouselText(ctx.Request().Context(), request.(MarkDeleteCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteCarouselTextResponseObject); ok {
		return validResponse.VisitMarkDeleteCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(ctx echo.Context) error {
	var request GetCategoriesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx.Request().Context(), request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		return validResponse.VisitGetCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostCategory operation middleware
func (sh *strictHandler) PostCategory(ctx echo.Context) error {
	var request PostCategoryRequestObject

	var body PostCategoryJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCategory(ctx.Request().Context(), request.(PostCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCategoryResponseObject); ok {
		return validResponse.VisitPostCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteCategory operation middleware
func (sh *strictHandler) MarkDeleteCategory(ctx echo.Context, categoryId UUID) error {
	var request MarkDeleteCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteCategory(ctx.Request().Context(), request.(MarkDeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteCategoryResponseObject); ok {
		return validResponse.VisitMarkDeleteCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategory operation middleware
func (sh *strictHandler) GetCategory(ctx echo.Context, categoryId UUID) error {
	var request GetCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategory(ctx.Request().Context(), request.(GetCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryResponseObject); ok {
		return validResponse.VisitGetCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchCategory operation middleware
func (sh *strictHandler) PatchCategory(ctx echo.Context, categoryId UUID) error {
	var request PatchCategoryRequestObject

	request.CategoryId = categoryId

	var body PatchCategoryJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCategory(ctx.Request().Context(), request.(PatchCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchCategoryResponseObject); ok {
		return validResponse.VisitPatchCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategoryItems operation middleware
func (sh *strictHandler) GetCategoryItems(ctx echo.Context, categoryId UUID, params GetCategoryItemsParams) error {
	var request GetCategoryItemsRequestObject

	request.CategoryId = categoryId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryItems(ctx.Request().Context(), request.(GetCategoryItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryItemsResponseObject); ok {
		return validResponse.VisitGetCategoryItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PostItem operation middleware
func (sh *strictHandler) PostItem(ctx echo.Context, categoryId UUID) error {
	var request PostItemRequestObject

	request.CategoryId = categoryId

	var body PostItemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostItem(ctx.Request().Context(), request.(PostItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostItemResponseObject); ok {
		return validResponse.VisitPostItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteItem operation middleware
func (sh *strictHandler) MarkDeleteItem(ctx echo.Context, categoryId UUID, itemId UUID) error {
	var request MarkDeleteItemRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteItem(ctx.Request().Context(), request.(MarkDeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteItemResponseObject); ok {
		return validResponse.VisitMarkDeleteItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchItem operation middleware
func (sh *strictHandler) PatchItem(ctx echo.Context, categoryId UUID, itemId UUID) error {
	var request PatchItemRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	var body PatchItemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchItem(ctx.Request().Context(), request.(PatchItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchItemResponseObject); ok {
		return validResponse.VisitPatchItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetItemPicture operation middleware
func (sh *strictHandler) GetItemPicture(ctx echo.Context, categoryId UUID, itemId UUID) error {
	var request GetItemPictureRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemPicture(ctx.Request().Context(), request.(GetItemPictureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemPicture")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetItemPictureResponseObject); ok {
		return validResponse.VisitGetItemPictureResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetCategoryPicture operation middleware
func (sh *strictHandler) GetCategoryPicture(ctx echo.Context, categoryId UUID) error {
	var request GetCategoryPictureRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryPicture(ctx.Request().Context(), request.(GetCategoryPictureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryPicture")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryPictureResponseObject); ok {
		return validResponse.VisitGetCategoryPictureResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedAccounts operation middleware
func (sh *strictHandler) GetDeletedAccounts(ctx echo.Context, params GetDeletedAccountsParams) error {
	var request GetDeletedAccountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedAccounts(ctx.Request().Context(), request.(GetDeletedAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedAccountsResponseObject); ok {
		return validResponse.VisitGetDeletedAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteAccount operation middleware
func (sh *strictHandler) DeleteAccount(ctx echo.Context, accountId UUID) error {
	var request DeleteAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccount(ctx.Request().Context(), request.(DeleteAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAccountResponseObject); ok {
		return validResponse.VisitDeleteAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedAccount operation middleware
func (sh *strictHandler) RestoreDeletedAccount(ctx echo.Context, accountId UUID) error {
	var request RestoreDeletedAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedAccount(ctx.Request().Context(), request.(RestoreDeletedAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedAccountResponseObject); ok {
		return validResponse.VisitRestoreDeletedAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedCarouselImages operation middleware
func (sh *strictHandler) GetDeletedCarouselImages(ctx echo.Context, params GetDeletedCarouselImagesParams) error {
	var request GetDeletedCarouselImagesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedCarouselImages(ctx.Request().Context(), request.(GetDeletedCarouselImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedCarouselImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedCarouselImagesResponseObject); ok {
		return validResponse.VisitGetDeletedCarouselImagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteCarouselImage operation middleware
func (sh *strictHandler) DeleteCarouselImage(ctx echo.Context, imageId UUID) error {
	var request DeleteCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCarouselImage(ctx.Request().Context(), request.(DeleteCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCarouselImageResponseObject); ok {
		return validResponse.VisitDeleteCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedCarouselImage operation middleware
func (sh *strictHandler) RestoreDeletedCarouselImage(ctx echo.Context, imageId UUID) error {
	var request RestoreDeletedCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedCarouselImage(ctx.Request().Context(), request.(RestoreDeletedCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedCarouselImageResponseObject); ok {
		return validResponse.VisitRestoreDeletedCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedCarouselTexts operation middleware
func (sh *strictHandler) GetDeletedCarouselTexts(ctx echo.Context, params GetDeletedCarouselTextsParams) error {
	var request GetDeletedCarouselTextsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedCarouselTexts(ctx.Request().Context(), request.(GetDeletedCarouselTextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedCarouselTexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedCarouselTextsResponseObject); ok {
		return validResponse.VisitGetDeletedCarouselTextsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteCarouselText operation middleware
func (sh *strictHandler) DeleteCarouselText(ctx echo.Context, textId UUID) error {
	var request DeleteCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCarouselText(ctx.Request().Context(), request.(DeleteCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCarouselTextResponseObject); ok {
		return validResponse.VisitDeleteCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedCarouselText operation middleware
func (sh *strictHandler) RestoreDeletedCarouselText(ctx echo.Context, textId UUID) error {
	var request RestoreDeletedCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedCarouselText(ctx.Request().Context(), request.(RestoreDeletedCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedCarouselTextResponseObject); ok {
		return validResponse.VisitRestoreDeletedCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedCategories operation middleware
func (sh *strictHandler) GetDeletedCategories(ctx echo.Context, params GetDeletedCategoriesParams) error {
	var request GetDeletedCategoriesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedCategories(ctx.Request().Context(), request.(GetDeletedCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedCategoriesResponseObject); ok {
		return validResponse.VisitGetDeletedCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(ctx echo.Context, categoryId UUID) error {
	var request DeleteCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx.Request().Context(), request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		return validResponse.VisitDeleteCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedCategory operation middleware
func (sh *strictHandler) RestoreDeletedCategory(ctx echo.Context, categoryId UUID) error {
	var request RestoreDeletedCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedCategory(ctx.Request().Context(), request.(RestoreDeletedCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedCategoryResponseObject); ok {
		return validResponse.VisitRestoreDeletedCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedItems operation middleware
func (sh *strictHandler) GetDeletedItems(ctx echo.Context, params GetDeletedItemsParams) error {
	var request GetDeletedItemsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedItems(ctx.Request().Context(), request.(GetDeletedItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedItemsResponseObject); ok {
		return validResponse.VisitGetDeletedItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(ctx echo.Context, itemId UUID) error {
	var request DeleteItemRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx.Request().Context(), request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		return validResponse.VisitDeleteItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedItem operation middleware
func (sh *strictHandler) RestoreDeletedItem(ctx echo.Context, itemId UUID) error {
	var request RestoreDeletedItemRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedItem(ctx.Request().Context(), request.(RestoreDeletedItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedItemResponseObject); ok {
		return validResponse.VisitRestoreDeletedItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedRefills operation middleware
func (sh *strictHandler) GetDeletedRefills(ctx echo.Context, params GetDeletedRefillsParams) error {
	var request GetDeletedRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedRefills(ctx.Request().Context(), request.(GetDeletedRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedRefillsResponseObject); ok {
		return validResponse.VisitGetDeletedRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteRefill operation middleware
func (sh *strictHandler) DeleteRefill(ctx echo.Context, refillId UUID) error {
	var request DeleteRefillRequestObject

	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRefill(ctx.Request().Context(), request.(DeleteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRefillResponseObject); ok {
		return validResponse.VisitDeleteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedRefill operation middleware
func (sh *strictHandler) RestoreDeletedRefill(ctx echo.Context, refillId UUID) error {
	var request RestoreDeletedRefillRequestObject

	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedRefill(ctx.Request().Context(), request.(RestoreDeletedRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedRefillResponseObject); ok {
		return validResponse.VisitRestoreDeletedRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedTransactions operation middleware
func (sh *strictHandler) GetDeletedTransactions(ctx echo.Context, params GetDeletedTransactionsParams) error {
	var request GetDeletedTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedTransactions(ctx.Request().Context(), request.(GetDeletedTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedTransactionsResponseObject); ok {
		return validResponse.VisitGetDeletedTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// DeleteTransaction operation middleware
func (sh *strictHandler) DeleteTransaction(ctx echo.Context, transactionId UUID) error {
	var request DeleteTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTransaction(ctx.Request().Context(), request.(DeleteTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTransactionResponseObject); ok {
		return validResponse.VisitDeleteTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedTransaction operation middleware
func (sh *strictHandler) RestoreDeletedTransaction(ctx echo.Context, transactionId UUID) error {
	var request RestoreDeletedTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedTransaction(ctx.Request().Context(), request.(RestoreDeletedTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedTransactionResponseObject); ok {
		return validResponse.VisitRestoreDeletedTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// ImportAccounts operation middleware
func (sh *strictHandler) ImportAccounts(ctx echo.Context) error {
	var request ImportAccountsRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ImportAccounts(ctx.Request().Context(), request.(ImportAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ImportAccountsResponseObject); ok {
		return validResponse.VisitImportAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetAllItems operation middleware
func (sh *strictHandler) GetAllItems(ctx echo.Context, params GetAllItemsParams) error {
	var request GetAllItemsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllItems(ctx.Request().Context(), request.(GetAllItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllItemsResponseObject); ok {
		return validResponse.VisitGetAllItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetRefills operation middleware
func (sh *strictHandler) GetRefills(ctx echo.Context, params GetRefillsParams) error {
	var request GetRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRefills(ctx.Request().Context(), request.(GetRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRefillsResponseObject); ok {
		return validResponse.VisitGetRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetTransactions operation middleware
func (sh *strictHandler) GetTransactions(ctx echo.Context, params GetTransactionsParams) error {
	var request GetTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactions(ctx.Request().Context(), request.(GetTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionsResponseObject); ok {
		return validResponse.VisitGetTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LbuJL/q7B4/qcm+ZccyRPPzd8cx5l1nbHjsZMzuzXrUkEkJPGEIjgAFMfr8pd9",
	"nn2qfZItXEgCJEiCsu5CvkQmcWkA3T90NxrNJz9AsxQlMKHEP33ySTCFM8B/ngUBmieU/UwxSiGmEeQv",
	"RiAGSQDZT/gNzNIY+qfHg8Gg548RngHqn/pRQn888Xs+fUyh+BNOIPafe34AcDiMQlZZviQUR8kkf5dG",
	"SfVlz/92hEAaHQUohBOYHMFvFIMjCiacon8RlPin/pH//NzzQxhDCsMh4KTnJM3racpqjB5Zjf+H4dg/",
	"9f/WL2amL6el//nz5XtWA85AFA9BGGJIiHEs4wgTOkzADBpfTxCaxLBuIuTbNAroHJsbEDVtaI1BEyEp",
	"jgI4xCiGbe1JfrhhFW5Z+eeejyFrKaARSvg0RBTOiGVDt2rd53xdAMbgkbdtT1NGDqGA2ta542Wf+SD+",
	"mkcYhv7pn2xatbVTp6+87L1cEiSx2myWJicjrpAAhd/v89Gj0b9gQNlYKtN9+uSHkAQ4SlmL/qnPnnpo",
	"7NEp9IAU1p4Pk/mMjSRhjB+Lfsdjv+d/jVLWJ6QwYcW+Ucj6zSXYJ3QeQt5EVfZYo0dfAWbzQFjrKnXX",
	"WU/qwzvZq/rsn5c3pSfnkhr12QWnrJiB2xKPlSZBeVs/GRjOEIXDbEUgm/1RjIIvMNQnwVTQfjpuee1b",
	"tbJ88y7rTBnXAotarJH8NXyI6HQ4ggkcR5Rx2QzORhD7PR+Es4hN7WSKCK8wTyEWD1+87Hd5Hf3BHxGd",
	"vitokS+vMpLk32eSMvnnr5LArClGpyiiTNZdJtn6bPHHTTJAhygZIYBDvhiyxBB90edAed5lGq4R/Zi8",
	"y1uXTz/+gxN+DjCaExhfzsAEVjfRdexS9ntExIgcznFcnWJOv0eRF0YkjcFjZYaMEFo0aMI2bW4+pzEC",
	"YXWGomziWunJZ28UJQBbUMhbbiLsE/xmUHwCFCNcpeicPc6YkLKaKm/97QP/VyWqt2U8QOWY9cGxmei8",
	"+nISxHy1zfM5hlK2Vzvbyxkfb8U8JAonCD9uu6hnmqA+DddgluNoMMcYJtQLshEZJlOqpsM5jqqN/RYl",
	"X9icykL27Zp4Sapeaoc9qWealuECY4TPUSimPtsIRiAcspYh32nGCI+iMOSaRwb9bKsYo3nCuvwLD6Pk",
	"K4gFkiUU4gTEQwLxV4iHkHXA6EJ0COZ0ChMasREVqKc2xdhFe5ANXnvIhqM9wHAcxbHeEgYJAVzRUZ7f",
	"W+1XFxi/A+FtPgEXGH9Q5uAC42JH+yD7u8D499vLfBouML6UM3HHJ+JCzsMFxteInpVmghVnk6E3yIRN",
	"f5JJjf70ksKZ/uSWT0iptWJG8hds5/23T59uBHUVUeSLN2RGZJu4KHz0zLQqQuRu1FTpShQjFU7O6vdU",
	"Ckzsy0ZeJRvMOI/GcEw1q/vt9z0rPBnNH4dxNIsWq52zrD3IrAPyJGIPuc3V5Ixo6lVto9VwZYtzI0qu",
	"CHIZEJjgFqU0moF4KBhhoVV8CWLXkbXItKUYzZDoVhmF/3YwGHivjt4O/v7atxxQ1tAQJiHpwGpWXgJG",
	"dIOLQI68p4lmZZ102anZywQ5dWBwk09xSTvilvNiXM9t/8WqSq/CYpWFJ2Kxul+jdKGapcWz9IoYl8LG",
	"BpWSkusd80cw4s4gtmVnf2m2Z1HEYiNnZLzLK8htMnvA9r58B1KUn3cg9Arl5xpRL0BJAqWD4ioiJEom",
	"3jiCcUi8v38tLFkPxBiC8NGD3yKiWvRegqiXKSbZs4jwxyCO0QMMGZrMCfQwJATNMXeSZSUDkLCS2msP",
	"UKHRRzPojaCYAal+eL/femwr9hIkvG2ZJuIJnczLdLL/QHMPYCjoKGkkwm4MERRk5kPiBkD1caaYGF6x",
	"aTc8FiqKqYdCT6m8tdPfrshE09+uyOQa0XN1FclELuQHvo7iUeZwEct4kRFUvFEUKu3hmVjEyuOvIIol",
	"812RiaofXpGJWT8UtJb1Q1a8pB9ekUlJP7wiE4N+yKrq+uEVmVT0Q9ZajX54DR86nW34x3xvOh68GQz+",
	"97//R9ufFjvoePHxwUp9+l397iWItfaeSzd5NuUm2L2GD/V29VItWU15GAEC1WWtsU/17bxuANuo0m+T",
	"Rlql46ZRC21dpSXopdusfy5D9WxUO6/hgwKdBtVTOaYtL1ySLxrAoWlp8hNCq6NCnRQuSZWTwrJ6zttt",
	"OVwztFsjobaLyl04tiahgWSxSrJPE8lihzOQKR1Y9uZo7vJqBYHiRKWyjga5948HP4h98ofKPtnoXkgC",
	"GHcy/ZUq9bvglp2wEDLvRIys0IGWrEL9lFghj2C0BttX4bgSM+VsUZx2F+NWh1Shtp7jc6srM2cyjTNj",
	"gqoO/azp3G0is+2M0wkwW9HSkgmUdiQn9HyKKIiHASKW82I8F5TorPGQ0nDTvtSK2BxHVwjbmaP+xcrT",
	"KnxxXZdVUTC6L23PnycRfQEv5DteMaM9bf3UHowcos+iBb9UgIRQgGWEB/gCk2EAMByiMQ8ASiIyhc0o",
	"Y7TUq33KLkovPrEezwGGH8fVlx+K7ktvznNq9PGte2zGcdWOyTwebSxcwDRl4mQEBz+evB0fHYe//Hz0",
	"w09vR0e//BSERwH45Wfw4w9vT34KQ03DmEdGhfNzGgIKtdCT9UU0brehvw/BexWpF+u9ZV6DGio35hpY",
	"6mGfcybsljOhxIysERjMcUQf71h5yYQMKXmAA4cGNpMBQl8imPkSTv13Z7fDs/dXl9fDu4u7u4I6kEb/",
	"gBwFWqvXVYxRAOIhRV/EGRevP4Ug5GGEsv6/H/3GSh194qUMjejRf01kfLx+9/Hs9n0NOWyGomSMWBNx",
	"FMCEwAJI/KvLT0xZwTEjkdKUnPb7KIWJONZ4g/CkLyv1ZxHtc7CMKN/iPqYwObu59I68d4AN7CvERDDt",
	"8ZvBm+NjIRowAWnkn/pv3wzevGVqD6BTvkR9UHixdZ7/FYrDlBEgUZCzvCz+HfHYaBhrsdI9fwJf3ASD",
	"L/77MhR1z3LPAYYkRQkRXPX9YCBCuxIKBeEgTeMo4HX7Iow/u4RQa7dZ7hGLxm2UxYPbd9qB3zwIICHj",
	"eRw/ehNUnhXW78nguNM4m4grwlkMtOinec89/4eOM7xwz+YzOBVN/NM/nyQE/Hn/zHRMfl3jz2wdCdf8",
	"UkCDaZX/xAb5HckmlzsUvTSqctsNa0DlN35K9g6Fjy9gtQQ+DOuvozC5jMOmAiV7Ryvd01u/t2C582zw",
	"z3svUHO+8KEiVIEy+JN1sbd6aL5RgT4ZnKyn5+rZPu/9l/X0fo6ScRwJ5XjHMOy5l2/FfZAZmMZN9XwK",
	"gy9epGuiBcAl7DckRPjeWUteChIYN2yw2V2KJYJCABJ+/wVpN89GCMUQJMLRPJRBHub3Lw2WVNrvadTc",
	"7/rm7GR5l2T5L1yvFv9+6wUo5PdQ5ArnckyR9yu/v1mnWv8BRwQFXyAvGkeEwsQbI+wRhgD/OR8Mvv/R",
	"C0Acj0DwxXvF3gQIxR5IIqFvk9cNgPD7bd58GRaOBd+X5OUhosE0SibeDUYUBSgmfk/aWryWjDKStmwh",
	"pxTPYU9ZuMzz+DmdYKBFNys60R0Mjv6AoztO39FZEMCUNjdbbSPrwIqah3wyDPQ8czZKpRP7RQtdvxxL",
	"U0nttc1VqZb8ekM/TSY6me0OsHaUltPsbCcjVvWeys6MEoCxgjp4iRskpFYVYfwN4tjLyhlY+A7G49v8",
	"dQowmEHKUeHPipMNTKCXzOU9T+5n+WsOuetUuklScf3BwDUNZ0YVnyLvgbvyinME4qUQe7J9U9fCF/rS",
	"vvmRhxcqsb5i6mo65Qcww1CcVBl6lm8qglzu9iIJ7TuFSdi9y/ulao+549nGeTkD34apVBWtvKQdyioC",
	"YHWwIeNrbMOLJL9lvJWPxAZy145yDB8Qjv5rd1xE2erpoKZKfSuyaYUN8HYu7C+5UX/SSx862n2IYgqx",
	"N3r08kAeM8iVwKZbTMm+Yk+ZT7uG7hhRaNth5WTwdj1dF1dXraBEW4z7WoVfXEP3gJfAB1Xgqv5mRMpo",
	"saiCbx/66gtbpSQsy1vrUlcbZ62S22T9nLVpZ80ubNIlyVJ2alK/LWcl1BNE0nQK2VSpzuxu3cJTmURk",
	"wt0kVlt4CMdgHlP/1PLeYbnLJN/O89E0ElDdyHMKjhckgUCAg6mXB3kZ93Rexm/ywdyv4hCqcwiSKexo",
	"pRpAZ792F6WhZGYAlY8XtzRuIZ3jhPA9bcOO8M0rC1sIqkqQTdMRuVFhOQtDTxwZZd5IOoVeCCgYAQKN",
	"aouCjitSWXLZNGxzzfS+9GTbCjHsz4uElJCDFBN3UGQrm6rK038qLjU8F3mfqoL7nj9XLlfpgnoF8BdR",
	"RLLtZdimzVy+r97YioSaQ6fF1q5duqg/O7G4v1bVAE6q4zxQ2XFWQ+cNznz0tlC8YtcIxZ0Qro3uhIes",
	"MDppXkRdbYrorN321DDObRXK5avMhttJRk/fWhDAibgT8RdpvV2jDrgzLKmFhGKXtgxDYKiAvXOAw+Xi",
	"Q+spvYt/cPEPLv5hR+If3D6zzftMEflhdVKb40HV23mbvdrOPeOMX3a1wrU8J0J9dxaQfr/C8+MMPeqE",
	"/QBu7TiQ2UWQadVl+08yGXuLV1eksyAeqIOkwq9rD0xrNXF79RTo6KQTkE+PcyrvjVgjLJd8L7SIRn+U",
	"KPkdyQMdDW4pIbBb6JXatMhWLVT4ICbS1kikcGEa9ER1q/SaO+3mIAPyalDQHY93CdovaVVLDeFfIHZ/",
	"8xDtbg+42wPu9oALCOym0DbEWtcDbP9J/WqYXVhS09WHwoRV81LulFqsD89AhT5j2xzL0chwzk5eZa/q",
	"J1121EKuXIuqD6tqQIRfIXVQsHko2LbrWw4MdhwMmn1mSvFmx5nDhmX50QwELdWZtgLzyuku2+7donuH",
	"XAvaRf0n+UUCbiF1AT9WzxYBKZw5FFyMEpmu20BC8SmJFSOwSsKyPFlaYm4TBUALEmkgofjwzstCQhzE",
	"7w/E9zSAR1iA1R4B/ZxO+/xDc9VoDJmrj6L8wulDRKfZZ+lqAsuqCf5keR3YZblz8W6J2f1qviLSMfOf",
	"/DpW1xyAUXgA2aVLx5iHdnC7beKufeehPqchk/OJSLVpLenNOVjPrXN5ypL520bl7RaGEZbU0GlEvDmO",
	"PTCmEGfrUJ94A3cKJy3v3G9NyV11cqAn5tBDbEKzU0Al1etvSDDCYg3V0/rsZG0zstYsS/0RnERJ/+kv",
	"POQfVn/uJibLkaviww2NgvX7bf7xd4MNkI3ASdAKJGj7+ThLlm0KypVptMcIS0b0Pp7NOe+Y+behQol/",
	"s05bOFdtROQ4NsO/fPWCCwVaTzaBFyuWlQBh/idMwhRFXMYXEhVDO82Ssp0cGwCM5gTGfZ5Guzn4KSvr",
	"ybKm9KWyyGVW4kWau1WMidalIcrEaOVv0WJks9qWVKk0/ZXZPwtDfSqajMDZPKZRCjDtjxGeHYWAAvsB",
	"a918TmMEwhr7TaHXk7ZQWcBXmT+yxBruGtBhJHC6pHDmgRhDED568FtEKNktr5ICCQaM7j/x/20TOrXh",
	"RhE+VYYPyxOBrFmTG1wSupZLONKl4py4K+VtjuU76q3Vttr6GO82iSnrOVsuKuYPpvz/us+lRAkwfV24",
	"bvM8aL5rA2wKv1FLnVoUbWC1T7LA+jRq1uNBKNRs7pv06U/i/SpSLaldiBQCjao0o3STmrRgCadIO0V6",
	"pxVpDrb9J/ZfdzXaiBZVLVqChqVmIBs1RbMIIp0KvTeRuQzDd1+DFgJF4QThCLbfmlSKGpUc5e06NBze",
	"3eMOaTet91yVCbbMUhRks2DKU3RevFxRVvZiEUwKj3i3GV2nni6n5+xlxveM23Zb11HkXwfn/lMm6h20",
	"nRpsUBWdvIilkqM0alB0FBrXmLTnZM0strMbv7a7NDrPajin2OZ3g2UGa9xRHBd21G6as3k3qDas4raz",
	"4aoyei9X4xo4jcvZwG47bFa2+rk92mgd81I88bjV/nmZ5zveLvTafFohMZE7m09IvXq13ERCOR9aOUgY",
	"HWv/lGGn7xJapg5yeNaiWAl2sPQYyat+VW/RpXhxINrUNXwQAlJzZLIBp1UdPU59cgdzW6g/ZajTrjrp",
	"l+Db/FaJGaIKp9WWAtUmL5m7DNebj6rb4SvQigLR7JSpkU3ukXFiuV5P0HLUl4FTXxzcHSjcddFc+mkU",
	"0DmGzW4ggY9eVtbg/mHzdpO/dmDZPeo5TSY7Fve8/aKyqJBYCUXOvk1ykXlftlc29pY/9+REkTGqsC3D",
	"PFNbI2PKwl5e2MCWwuIMz4oijWy5dl95Rvt63OUEAhxMPcm3Nc5yXsbvcul7KdmA7B3jSl6g7fWNq8mX",
	"gMp97uuYe5qIX8JRDZJpOSeb3Gg3EM8Aozt+lAhHlE8he6/uPt9c3J69v7q8fl0BPIF2lplTNvOldBf+",
	"vq0faVyb5zzrfZed54Ww1/rcbiGhCEMPlBWVitjKkrqusgfi63xGDjYcbLTrCF0SAGVYYpEISOJJJR/Q",
	"AVlAm4zfaUmKtK3GivuO/4FaKouluDGaKyV0sjFaFszmUUkT4jLgHETossZeG/oIq07EwVkzLRl6dKNm",
	"L8Xb2TcOVhysLKxntGdmqkBNbYamEsxkiZqcqbNWU8ecrcpZOs7S2WIEsstB1GLn8KRgHcycbpmJynmP",
	"XIqiA1JGaCVX0fp1EU7D4Vo4xnRjZgNnfwTbWTcOUBygdNUsrJKxFQDTlJAtRxal0HYZNAX9O2DS6Gvz",
	"whx122rTBDqzOMPmwAyb7unG6gwbGVNsZdPsdhIyZ85sLEjdpRdcgxFTk8umbL/skRA708WBhwMPG42h",
	"PTVWhiOZt7zOTLHKh+WOXA4nO5Q7anEWSZf8MTUXX/iFbAsrpFv6iu3I6OIsj41c33Y5olZqcRhTzOjW",
	"xs4Lq7MwHEg4kGja+TEcR3FsZ1tkZeuti9u8hLMvFrQvtsQyYGPKOcPK1BFrb/hOkG5jYIVFnJVxUFaG",
	"XPr+k/ix2JGHqGtjakiGtNZfcFbeoMHkFDuDY190CcEeG9ImZOcHZ3TkMtZkduyJ4DrjwwGGA4w2pYBi",
	"kBAQsE7srBCtQr0p8kkv5uyRXbdHyoxiZZQoXNBqmdAyxzjz5KDME3X9+0/KX4sZKkoDNtaKyqn238LW",
	"KpnC0rVROONlb76MrTDXZhQSlYKDM2N0uWuyZfZTrJ1p4+DEwUm7ahHNUoSplifZ/O2wS16wsAvGGM08",
	"4J3f/dMbR3E1bYcor+RLrv8Axmwe0ygFmPaZln0UAgqa9H3enVU6bQs9uG1Yz0s1VWaQEGlQNDHAlSjG",
	"GStBdAiCAKZszVSjojRYg+nQOniJmON5HD96ghPUNNgOSPfx+/goGcdRQHcLtHKelKjVGG36irfz2tM/",
	"yPoQ0SmTaabbeCAJvRRMogQYNaRfIT2L4+2MRN2jr6I2dFi+FFDqU78V8LJPmxSd8sbNHcpX68plf6Bf",
	"eHVOIdvPFcVoguYG7PtNPO+ZkTF/q8Nd/tjayBIqQ4wmExh6rO669+wAJQkMKNzuT5T0nrj+hpIRAjjk",
	"Tlx9W2MFxYLahDmxzawhxGlbY5tUt+V6Nq47CjD1+KcKjSew1R0M02FY3sbynuWbinlR7vYiCe07hUnY",
	"vUsXydUWyeVOPnZ7k8tYQaCi9dkrg0ZW7ivU4eYVwiHE5LUJL7f6AHb9oLkKbV+Z4kzpd4e/9oe/Dsx2",
	"G8w0prh/FjVZUwJi5jj2T/0ppelpvx+jAMRTROjpz4OfBz6Tz+I9YQXg0QjgNxTGMECzBCTB45sE0j5I",
	"o/7XY0MFVvoRPqB4/GaMWTFfoa16hBQDfnCEvDmB+DvClxomVM6r8iUYNtAqfBgaKJy/+kdkiFX1UrRD",
	"9WDJrhm5oXivMASxN0MJfHxdjr4ztVSkSyq8LlHC9ToyRWnFFxFBUyvch+ShxCMghjUNCKgwUaBmq+U+",
	"q/wjHXnfoohxJsSZIMLyUJDtIlkUQNFCdhzwfP/8fwEAAP//BSLbbKtFAQA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
